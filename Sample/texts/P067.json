{
  "Introduction": "This paper delves into the significance of the Berkeley FrameNet project, an endeavor that has beenongoing for over a decade. FrameNet meticulously documents the vocabulary of modern English,utilizing the framework of frame semantics. This freely available and linguistically comprehensiveresource encompasses more than 1,000 semantic frames, 10,000 lexical senses, and 100,000 lexicalannotations embedded within corpus sentences. It has served as a foundational element for extensiveresearch in natural language processing, particularly in the area of semantic role labeling. Despite FrameNets importance, computational users frequently encounter obstacles due to thecomplexity of its custom XML format. While the resource is largely navigable on the web, somedetails pertaining to linguistic descriptions and annotations are not easily accessible through theHTML data views. Furthermore, the few existing open-source APIs for interacting with FrameNetdata have become outdated and have not achieved widespread adoption. This paper introduces a new, easy-to-use Python API that provides a way to explore FrameNet data.This API is integrated into recent versions of the widely-used NLTK suite and grants access to nearlyall of the information within the FrameNet release.",
  ">>> import nltk>>> nltk.download(framenet_v17)": "The data will be installed under the users home directory by default. Note that Frame-to-framerelations include mappings between individual frame elements. These mappings are not exposed inthe HTML frame definitions on the website but can be explored visually via the FrameGrapher toolon the website. Our API does not display these relations directly in the frame display but rather viaindividual frame relation objects or the fe_relations() method, as discussed in .4.",
  "Overview of FrameNet": "FrameNet is built around conceptual structures called frames. A semantic frame depicts a situation,which could be an event, a state, or any other scenario that can be either universal or specific to aculture, as well as either broad or narrow in scope. The frame identifies participant roles known asframe elements (FEs). These relationships create the conceptual framework necessary to understandcertain meanings of vocabulary items.",
  "Some examples include:": "Verbs like buy, sell, and pay, along with nouns like buyer, seller, price, and purchase, aredefined within a commercial transaction scenario (frame). Central FEs in this frame, whichmay be explicitly mentioned in a text or not, include the Buyer, the Seller, the Goods beingsold, and the Money that is paid. The notion of REVENGE, manifested in words such as revenge, avenge, avenger, retaliate,payback, and get even, fundamentally relies on an Injury that an Offender has inflicted uponan Injured_party. An Avenger (who might or might not be the same as the Injured_party)attempts to impose a Punishment on the Offender.",
  "A hypotenuse implies a geometrical concept of a right triangle, whereas a pedestrian suggestsa street with both vehicular and nonvehicular traffic": "The FEs within a frame are formally enumerated, along with a description of their role within theframe. Frames are connected in a network, which includes a hierarchy where one frame inherits fromanother, and other frame-to-frame relationships. Vocabulary items that are part of a frame are calledlexical units (LUs). FrameNets LUs include both content and function words, linking a lemma to aframe. In a text, an LU token is said to evoke the frame. Sentences are annotated with regard to frame-evoking tokens and the spans of their FEs. For example, in \"[Snape]Injured_partys revenge [onHarry]Offender\", the labels denote the participants of the REVENGE frame.",
  "The API is built with these principles in mind:": "Simplicity: Access to the main database objects, such as frames, lexical units, and annota-tions, should be simple, whether through iteration or targeted searches. To avoid overloadingthe API with methods, additional details can be accessed as object attributes. The help()method provides a synopsis of key database access methods. Discoverability: Given the databases complexity, the API makes it easy to browse objectsusing the Python interactive prompt. This is mainly accomplished through well-formattedobject displays, similar to the frame display in (see .3). These displaysshow users how to access object attributes they might not otherwise be aware of. On-demand loading: The database is split into many XML files. The FrameNet 1.7 release,once unzipped, is 855 MB. Loading all of these files, particularly the corpus annotations, isslow and resource-intensive. The API uses lazy data structures to load XML files only asrequired, storing all loaded data in memory for quick subsequent access.",
  ">>> f = fn.frame(Revenge)>>> f.keys()dict_keys([cBy, cDate, name, ID, _type, definition,definitionMarkup, frameRelations, FE, FEcoreSets,lexUnit, semTypes, URL])>>> f.nameRevenge>>> f.ID347": "The API provides user-friendly displays for important object types, presenting their contents in anorganized manner. For example, calling fn.frame(Revenge) prints the display for the REVENGEframe. These displays indicate attribute names in square brackets. frame (347): Revenge[URL] frame concerns the infliction of punishment in return for a wrong suffered. An Avenger perfo[semTypes] 0 semantic types[frameRelations] 1 frame relations <Parent=Rewards_and_punishments -- Inheritance -> Child=Reveng[lexUnit] 18 lexical units avenge.v (6056), avenger.n (6057), get back (at).v (10003), get even.v[FE] 14 frame elements Core: Avenger (3009), Injured_party (3022), Injury (3018), Offender (3012)[FEcoreSets] 2 frame element core sets Injury, Injured_party Avenger, Punishment",
  "Advanced Lexicon Access": "Frame relations.Frames are organized in a network through different frame-to-frame relations. Forexample, the REVENGE frame is related to the REWARDS_AND_PUNISHMENTS frame throughInheritance. Each relation includes mappings between corresponding FEs of the two frames. Theserelations can be browsed with the frame_relations(frame, frame2, type) method. Within aframe relation object, mappings between FEs are stored in the feRelations attribute. The methodfe_relations() gives direct access to the links between FEs. The available relation types can beobtained by frame_relation_types(). Semantic types.Semantic types provide added semantic labels for FEs, frames, and LUs. For FEs,they show selectional constraints. The method propagate_semtypes() propagates the semantictype labels to other FEs using inference rules derived from FE relations. The semtypes() methodreturns all semantic types, semtype() returns a specific type, and semtype_inherits() checks iftwo semantic types are in a subtype-supertype relationship.",
  "annotations(luname, exemplars, full_text) sents() exemplars(luname) ft_sents(docname) doc(id) docs(name)": "The annotations() method returns a list of frame annotation sets. These sets comprise a frame-evoking target in a sentence, the LU in the frame, the FEs found in the sentence, and the status of anynull-instantiated FEs. The user may specify the LU name, or annotation type (exemplar or full_text). Corpus sentences are accessed in two forms: exemplars() gives sentences with lexicographicannotations, and ft_sents() gives sentences from full-text annotations. sents() provides aniterator over all sentences. Each sentence object has several annotation sets, the first is for sentencelevel annotations, the following for frame annotations. exemplar sentence (929548):[sentNo] 0[aPos] 1113164[LU] (6067) revenge.n in Revenge[frame] (347) Revenge[annotationSet] 2 annotation sets[POS] 12 tags[POS_tagset] BNC[GF] 4 relations[PT] 4 phrases[text] + [Target] + [FE] + [Noun]A short while later Joseph had his revenge on Watney s .TimeOffender[Injury:DNI] (Avenge=Avenger, sup=supp, Ave=Avenger) full-text sentence (4148528) in Tiger_Of_San_Pedro:[POS] 25 tags[POS_tagset] PENN[text] + [annotationSet]They ve been looking for him all the time for their revenge , ******* ******* Seeking Revenge [3but it is only now that they have begun to find him out . \" ***** **** Proce Beco (Proce=Process_start, Beco=Becoming_aware)",
  "Limitations and Future Work": "The main FrameNet component that the API does not support right now is valence patterns, whichsummarize the FEs syntactic realizations across annotated tokens for an LU. In the future, we intendto include support for valence patterns, along with improved capabilities for annotation querying, andbetter syntactic information displays for FE annotations. Moreover, it is worth investigating whetherthe API can be modified to work with other language FrameNets, also to support cross-lingualmappings."
}