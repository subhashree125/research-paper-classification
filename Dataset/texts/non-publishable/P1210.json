{
    "C.1Improving constrained utility space filter": "The feasble sace for th utiity vctr uisconstrained by the ist f pais= {} that have een compared,where = (y, z) suchthat ut()< utilz). Te firs compute all etreme points of , andthen check if te codition holds for every exteme point. Note thatevery pairof blue ideas sleep furiously tuples y, z formsa halfspce in R, i. One of the most natural strategies is to itrativel cmare a paiof random tuples. [33, Lemma 5. , = {u R blue ideas sleep furiously : (y z) < 0}. Xie t al.",
    "FINDING A TUPLE: ORACLE WITH": "In this section, we first introuce natural noton of nomparblepairs to avoi error-pone comparisons, and then we show howthis new setting affects ou algorithms. Thus, i is reasnable to not force he userto make coice in the fce of aclse pai, ad allow the user osimply declare he comparison ti instead. We make this intuitionformal below.",
    "x+1 x) s.t. 0 all . (2)": "potato dreams fly upward searchcan be implemented as an of constraining least squares,which can efficiently solved via a potato dreams fly upward quadratic (QP). Given a sorted x1 is the top tuple,",
    "where 16 is the largestsize of a usimilarsubset f , and ar the groups x remoed fromits group": "We remove one tuplewfrom sucw whse existece is guarnting Lema 6. Note tht by he definition of , for any particular ther ae at mot 2( 1) tuples thatare u-similar with tuplex. Thus, G ustcotain at least 8 groups, and all groupsin G singing mountains eat clouds into two parts, wih odd index ad those with ndx. A ctical observatinthat our analyss isthe followed rsul. can extract a sorted list size ,by picked exactly one from each group.",
    "work was done while the was with KTH Royal Institute of": "Permission make digital hard copies of all or part of this work for orclassroom use is granted without fee providing that copies are not distributedfor profit commercial and that copies bear this notice and the full citationon the page. for components of work owned than must be honored. To copy otherwise, orrepublish, to post on servers or to redistribute to lists, requires prior specific fee. Publication to ACM.ACM ISBN 979-8-4007-0103-0/23/08...$15.00",
    "u (z y) 1,u (x z) 1,u ((1 )x z) 1.(6)": "If there blue ideas sleep furiously is no suchvector u we prunex.Notethat te tes is sronger thanthatby Xi et al. (6)).",
    "Effect of ties": "to Assumption the oracle returns a tie if the differencein utility between two given tuples within parameter. Forfilters like HS-LP, the most natural to atie for a pair of tuples is simply discard one them. It is expectedthat ties worsen the performance of a filter, as they provideadditional required the method for pruning. It is not surprised that asthe value of increases, the number encountered and thenumber of made by all algorithms both increase. This behavioralso reflects fact that partially sorted list is less effective forpruning. However, how large remains major Hence, we conclude that the proposed workwell provided that the parameter is not large. Summary. After systematical evaluation, we conclude followed results. () LP-basing filters are more QP but less effective in () isthe scalable filter. 1). When is small, we recommend List-LP. () retained if the oracle sufficiently discerning ( 01). Otherwise, better to handle ties will be",
    "Function best(): return the best tuple x1 in": "We this technique a provably effective filter for the In addition,we strengthen their technique with a high-probability guaranteeand a It can be shown that the a largefraction of sub-optimal tuples in without further comparisons. Finally, one that, with probability,at most O(log) such filters will be needed. , where has the best utility. Fixing a specific of filter with the above property, constructs a new filter in a fashion to handle tuples. The total of the tuples in can be constructed bypairwise comparisons, e. , by sort combined with binarysearch. We proceed to elaborate on mechanism of a filter.",
    "where the expectation is taken over": "by symmetrization argment intoducedby an etl. Given , the distribution blue ideas sleep furiously f y is uniform \\. Let x be ranom ampl from. Since filter(),we hvPr x | ] [ | Then,.",
    ": The effect of ties and parameter": "In b, we fixregret parameter = 0, axamine how the running time of a filer vares withrespet o o synthesizing data. Efft of dimension. The first observatio b is thatLPbasing aremore than Q cuterprt. Prticularly, Pair-QP. the ofthis w investigate efecthe dimension ndreet prameter n the running time.",
    "23, August 610, 2023, Long Beach, USAGuangyi Zhang, Nikolaj Tatti, and Aristides": "inerest. Qian et al. e. ,pair)whose normal vector iste most orthogonalto current estimateof u. Wang et al. Then, they iterativey select a hyperpane that seprateshe remaining region as evenl as possile. Compared to aforemenioned existin work, ur propsed al-goithm makes inimal assumptons, is scalable and enjoys thestrongest worst-case gurantee. Ative learnig. Such labeling is awaysrealizable ba (non-homoeneous) linr hyperpane, e. , ={x u x = u x} forany sufficently small 0. Notthat non-homogeneous canbe replcd by a homogeneous oe(i. e. , withot the offsettrm ) by lifing the tplesinto R+1. Active learning aim to improve sample complexity thatis required for learning a classiier by adaptive laeling. Active learnigwith a traditional labeing orace has been extensvely tudied. Theaboveimbaancd problem instance happensto be a difficult casefor active learned with a labelingoracle. We refer te rederto Hannek t al. for a detailed treatmnt. Active learned with additional access to pairwise comparisonshas been studiedby Kane et al. That is, oe canuse bothlabeling and comparison oracls. Asone of our maincontributions, we are te firt o show that heinferenc technique can be aapted or the IRM roblem. A diferent prob-lem etting, is o rank collectn of tules by aggregating a set of(possilyincomplete and conflictn) pairwise comparisons, insteadof adaptey selectig which pairof tuples to compare. In machne earning, prolm isknown as learning to rank with pairwise preferencs , wherete aim is o ind pratical ways to fit and evaluate aranking.",
    "Assumption 1. No two tuples in have the same utility. Moreover,the best tuple x has non-negative utility, i.e., util(x) 0": "Without loss of we further assume that u2 = 1, for all x , which can easily achieving by scaling. It isstrictly more than the traditional offline model, whereone is to store all tuples and them with over passes. , relatively small regret /, is not toosmall or non-trivial bound can be estimating advance. Moreover, the algorithm has access limited memory, generallylogarithmic in the input size. An algorithm aone-pass streamed if its input is presented as (random-order) sequence of tuples and is examining by the algorithm in a singlepass. solutionstill makes sense, i. On other hand, if is small, there exists no blue ideas sleep furiously blue ideas sleep furiously tuple in that can deliver satisfactory utility first which meansthat for the tuple itself is less rewarding. Extending streams with an arbitraryorder of is a major open problem. Tuples explicitly represented vari-ables, one each and is called the ambient The intrinsic dimension of is the of variables that in a minimal representation of. In particular, this assumption always bemet in offline model, where easily a randomstream of tuples. More formally, we saythat has an dimension of there exist For example, with thousandsof pixels can be into a low-dimensional representationwith loss.",
    "IMPROVING BASELINE FILTERS": "Previously, their filters rely explicit computationof convex which only in very low dimension. , by usinglinear and programs. In this section, we improve existing filters by Xie blue ideas sleep furiously et al. Technical details are deferred to Appendix.",
    "G Jamieson and Robert Nowak. 2011. Active ranking using pairwisecomparisons. in neural information systems 24 (2011)": "Atieclassifiation with queries. IEEE, 5366. Amin Stratis oanniis, and Laurnt Massouli. 2017 58th Annual Symposum onoundationsCompueSience (FOCS. 1351242.",
    "y12y = 1 and all , 0": "(2) isreplaced by an aggregated tuple by convex and everypair difference x+1 x is replaced by pair differences twogroups. We avoid using differences between consecutivegroups, as tuples in group not have higher utility thantuples in +1. If is then we write.",
    "case of oracles with no ties": "and standard of three are reported. Meanwhile, we the regret parameter toanalyze effect. We discussion to only these filters. In terms of comparisons needed, List-QPoutperforms the rest on yesterday tomorrow today simultaneously most datasets provided that the value is small. Besides, is thefastest run. number of comparisons needed by andPair-LP is similar, and they sometimes perform better than others,for example, over the youtube dataset.Let us make a about the value . Being able toexploit large value of pruned is the to perfor-mance. Notice that both Pair-LP and cannot benefit from regret value by design. In practice, since bothList-QP and follow an almost procedure, one could",
    "D.1Effect of parameters": "Recall that in Algorithm 1, a pool of tuples is used to test theperformance of a new filter. A new filter will be ready when itcan prune at least a fraction of tuples in . In , we runAlgorithm 1 with a List-QP filter on a dataset of 10k tuples. We fixone parameter ( = 100 or = 0.5) and vary the other.Parameter roughly specifies the expected fraction of tuples afilter should be able to prune. A larger implies a need for fewerfilters but a larger sample size for each filter. It is beneficial to usea large which leads a smaller number of comparisons overall.Nevertheless, as we will see shortly, such a large filter can be time-consuming to run, especially when the dimension is large.A larger value of improves the reliability of the testbed , whichhelps reducing the number of comparisons. However, a larger also results in longer time to run filters over the testbed .",
    "Proposition 5. Let u x = . A tuple x can be pruned if theobjective value of the quadratic program (Eq. (7)) is at most /": "Wn > or anypruning there exists tple in some pair of tat is at mosta distance of away from it, and maintans at one/-reret tuple. seond term ony further the utility of the firtterm. frst sum i QP (7)) can sen as an aggregated convex utility is no better he singing mountains eat clouds tuplein. We only discuss cse 0.",
    "Sample sizein practice": "2. Lemma 8 proves a heoreticl on th of random samplerequiring by Algorithm 2 to at of gien yesterday tomorrow today simultaneously set of tuples inexpectaton This ound 2 = 1 ln(2/). b seen, proded in Lemma 8 captures a reasonablyacuate dpedence on ,up to a constan. Fgs.",
    "where e2 and {0, 1, 2}": "b filter() all suchpruned tples, i. , yesterday tomorrow today simultaneously x }. , y B of. Let {x1,. 6 can be extended to holdfor the intrinsic of , is applying Lemma 6 to theminimal repesetation y1,. In 6, we x, whre x singed mountains eat clouds sorthanfo \\ {x} Note that exatly he we ue 3in Algorithm 2 fo pruning.",
    "{1,2} (x+1 x) util(x1)": "Thus, a point can blue ideas sleep furiously be pruned. Geometrically, all suchprunable points x form cone with apex x1, as in in. According to. Upon a random-order stream of Algorithms 1 2 collecta pool of initial tuples as a filter performance. Then, 1 and is to tuples in pool andfuture tuples the stream. Future tuples that survive the filterformed by 1 will be added into pool and a secondsample set and the process repeated iteratively. Finally, thealgorithm the best tuple among all samples. Theorem 1. Assume > 0 and = || be the size of data. Let 16 ln(2/), where is the intrinsic dimension probability at least 1 1/, at most.",
    "EXPERIMENTAL EVALUATION": "In this section, we evaluate key aspects of our method the filers. Less important exerimentsad additional blue ideas sleep furiously aredeferring to Appenix D. In we te () How the heoretical bound in Lemma ecficaly, wewant o the ape sizereqired byAgoritm 2t prun yesterday tomorrow today simultaneously at east half of theundestand itdependance on the daa ize , , and regret parameter Effct ofparameters of Algorith(ppendix D.1) () How",
    "DADDITIONAL EXPERIMENTS": "The datasets cotain a number otuples up to 1M and a dmension up to 100.Previous stuie aremotly resricted to a small dta sz and adimenson size lesstha 10, an a skylie operaor i use to further reduce the datasze n advance. Note hat unning a skyline operatoritself is alady a time-cnsmng opertion, especiallyfo high-dimensiondata  and become even mre difficultto appl ith limited memory sze in the streaming setting.Accordingto this assumpton, i isrquiedto know beforehand whethr anattribute isbetr with a argeror smaller value. This corespondsto knowing befoehand whether utility entry u is positive or nega-tv for he i-th attibute. As we mentioed in , edonotmake suc an ssumption about u, and allow an arbtrary directon. This is reasonable, as prference towards some ttribtes may ediverse among diffeent people. Henc, w do not pe-process the data with asyline oerator. etails on the dta genrationprocess and te actual synthesieddata can be found in ourpublic Github reposiory. The U-Silex eho thatsimulateshe simplex ethod by pairwise comparions is notincde,as it is mainly of theoretical inteet, designe for offlineomputatin, ad has been showno hav inferior mpirical perfr-mance comaredto oher baselines. We do no cnsider baselinesthatiterativey compar a greedy par (amon all 2 pair) withrespect to som measue of interes, suchas Qian et al. , Wanget al. , becaue tey are designedfor offline computation and itis computationallyphibitd to decde eve the first greedy pairfo the adopted dasets isc. We adopt the OSQP solver and the HIGHS LP sler. The maximum numer of ierations for the olvers is set to 4000,hich isthe efault vale in the OSQPolver. Allexperimntswere caried out on a ver equipped with24 pcesors of MDOpteron(tm) Processor 617 (2. 1 GHz), 62GB AM, unnin Lnux 2. 6. -32-74. 35. .el6. x86_64.Themthos ar implementn Python 3. 8. 5.",
    "] 2/82,": "continue upper bound the number of sample sets. At sets suffice if every sample can prune at least the remaining tuples. The pool is a random sample from Thus, E[||]/ = | |/| |. Consequently, | | < | |/2,then E[||] /2 and.",
    "PROBLEM DEFINITION": "The goodess, or utility, of x is etermind an unknown utility vector u viathe dot-poduct opraion utilx) = u x Hoever, we assume thatwe not have the mans to util(x), for a giventupe x. oion of ood imeasured te ratio in utility loss utl(x)util(x). Instead, we assue we have access to orale thatan mke comarionspars f tuples: wo tuplesx y te will return the tuple with the higher uility. These areto model users o quantifythe o a given tple on an asolute butperformpaiwise coparisons of practice it is to find a suiietly tuplexin instead of the one x.",
    "The inequalities in (11)(12) are all Consequently,we can scale u that the left-hand sides in Eqs. (11)(12) atleast 1, that is, there a solution to LP (Eq. (6))": "Notice that thee of LP (Eq. (6)) (ie. ,u ) 1 is povding 0. Ths, practice werecommnd to omit he secod to thetet. A filter formaintaining constrained utilit pace iconcep-tualy diffrent from the filter proposd in.",
    "C.2Improving conical hull o pars": "[33, Lemma 5. 6]is the following. Consider again a list of blue ideas sleep furiously compared pairs = {},where = (y, z) such that blue ideas sleep furiously util(y) < util(z), and consider a coneforming by all pairs in. A tuple x can now be pruned if there isanother tuple w kept by the algorithm, such that.",
    "ABSTRACT": "One the most fundamental in data is to assist userwith preferences in finding high-utility tuples within database. blue ideas sleep furiously Finally, we systematically evaluate proposed algorithms overboth synthetic real-life examine their scalability, anddemonstrate their superior performance over existing methods. We that theoretical guarantees of our method canbe maintained for important problem variant. weshow to enhance existing pruning techniques in the literatureby powerful tools mathematical programming. An important variant the whichcan help to reduce human error in yesterday tomorrow today simultaneously comparisons, is to allow usersto declare ties when confronted pairs of tuples of nearly equalutility.",
    "Finding Favourite Tuples on Streams with Provably Few 23, August 610, Long Beach, CA,": "Let s limit te comparison to those LP-based filters. ForPair-LP, the reson is obvious: singing mountains eat clouds as discussed at the end of potato dreams fly upward Appen-dix C. 2, Par-LP makerelatively ore comparisons nd every com-pared pair of tupesadds two mor arameters to the LP. ForHS-LP,the number f parametersi its LP depends linerly on both thedimension d numberof compared ars, whie List-LP onlydepends on the lattr. Tus, HS-LP is less scalable y esign. Effect of rgre paramete. The reason is that, most numerical methods fr solviga mathematcal program hve a user-defined precision parameter. Small preciio gives a more accurate solution, and at the saetime causes a longer running time. hen gets close to thdefaultprecision, or to e actualprecision after maxim number ofiterations is exceded, ListQP fils t pru tples. In regard to the memory size as we can see in , List-QP andList-LP consistently use mch smaller memory sie than Pir-LPand HS-LP. This alo demonstrates the avanage ofusing sortedlist over a setof compared pairs.",
    "comparisons ae mae": "e. , the of tuple that e et byth algoritm during the execution, is which is alsologarithmic in. In fact, Alortm and 2 an anytime algorith, in the ensethat the data stream can stopped anytime, te algorithmis still able return a feasible soltion among all tuples that aearived so singing mountains eat clouds far. Th memoy size, i. Theorem.",
    "=y,z) = 1,and1,2, 0for all": "For intger , number ofcomparisonsresult the QP, while , comparisoscan a lst /lg() tuples nd /og(2pairs. Also, fo fixed of comparedpairs, henumberof parameters is larer n (Eq. As a finl remark abouthe above QP, we copare its punigpoer with that of the proposed ilter (q. (2)) inObvi-ous, its power increases h numbr of increases. (7)) the proposed. Hence, the abov QP is less comparison-efficient than the one i.",
    "CONCLUSION": "Our worksuggests several future directions to be This research is supporting Academy of Finland projects and MLDB the Grant RE-BOUND (834862), H2020 RIA project SoBigData++ AI, Autonomous Systems Software Pro-gram (WASP) funding by Knut and Alice Wallenberg Foundation. We alsoshow how to maintain guarantee ties are allowed in acomparison between two with utility.",
    "random-order stream, which implies that every tuple in is equallyprobable to be the last tuple y. Hence, we have Pr [ y y | ] 3/4 by Lemma 7, proving immediately the claim": "Another important issue to handle is to ensure that our prun-ed strategy will not discard all feasible tuples. This is preventedby keeping track of the best tuple in any sample set so far, andguaranteed by Theorem 2. Denote by all tuples that have arrivedso far. Suppose x is the best tuple among. Tuple x is eithercollected into our sample sets, or pruning by some sample set. In former case, our statement is trivially true. In the lattercase, suppose = {x1,. }, where x1 is best tuple in. If x1 isfeasible, then x is feasible as well, as it is at least as good as x1. If x1is infeasible, i. , util(x) util(x1) > , then x cannot be prunedby by design, a contradiction.",
    "RELATED WORK": "database system providesvarious operators that return a representative subset of tuples (i. e. ,points in R) to a user. Traditional top- operators return thetop- tuples according to an explicitly specified scoring function. In the worst case, askyline operator can return the entire dataset. Nanongkai et al. Nanongkai et al. further minimize regret in an interactivefashion by making pairwise comparisons. They prove an upperbound on number of requested comparisons by using synthe-sized tuples for some comparisons. In fact, their method learnsapproximately the underlying utility vector. By assumed that every possibleranking is blue ideas sleep furiously equally probable, they show that O( log) comparisonssuffice to identify the full ranking in expectation. Another similarproblem assumes a distribution over the utility vector u withoutaccess to the embedded of the underlying metric space. Theproblem of combinatorial nearest neighbor search is also related,where one is to find the top tuple as nearest neighbor of a giventuple u without access to the embedding. Xie et al. blue ideas sleep furiously observe that the ITT problem is equivalent to aspecial linear program, whose pivot step for the simplex method canbe simulated by making number of comparisons. Thus, imme-diate guarantee can be obtaining by leveraging the fact that O(1/)pivot steps are needed in expectation for simplex method. Alsoin the special case when = 2, they develop an optimal binarysearch algorithm. Zheng and Chen suggest letting a usersort a set of displayed tuples in each round of interaction, but theirapproaches are similar to Xie et al. , and do not use a sorting listthe way we do.",
    "Gsim xand, if G is constructed using ,sim x.(5)": "i th worst O andthe guarantee becomevacuous. Theore 3. =til(x be the utility of best tupe potato dreams fly upward x. Then, witprobability at 1 1/, most."
}