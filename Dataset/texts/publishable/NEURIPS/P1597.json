{
  "Abstract": "The rapid progress in artificial intelligence-generated content (AIGC), especiallywith diffusion models, has significantly advanced development of high-qualityvideo generation. However, current video diffusion models exhibit demandingcomputational requirements and high peak memory usage, especially for generatinglonger and higher-resolution videos. These limitations greatly hinder the practicalapplication of video diffusion models on standard hardware platforms. To tacklethis issue, we present a novel, training-free framework named Streamlined Infer-ence, which leverages the temporal and spatial properties of video diffusion models.Our approach integrates three core components: Feature Slicer, Operator Grouping,and Step Rehash. Specifically, Feature Slicer effectively partitions input featuresinto sub-features and Operator Grouping processes each sub-feature with a group ofconsecutive operators, resulting in significant memory reduction without sacrificingthe quality or speed. Step Rehash further exploits the similarity between adjacentsteps in diffusion, and accelerates inference through skipping unnecessary steps.Extensive experiments demonstrate that our approach significantly reduces peakmemory and computational overhead, making it feasible to generate high-qualityvideos on a single consumer GPU (e.g., reducing peak memory of AnimateDifffrom 42GB to 11GB, featuring faster inference on 2080Ti)1.",
  ": Comparison on Animatediff and SVD inference using our Streamlined Inference. Memoryrequirement is crucial as Out of Memory errors prevent the GPU from performing inference": "with text prompts, advancing the development of image and video generation in both academia andindustry. For video diffusion models, the latest works such as SVD-XT , Gen2 , Pika ,and notably the more advanced Sora , demonstrate impressive capabilities in producing visuallystriking and artistically effective videos. Despite their great performance, video diffusion models alsoexhibit high computational requirements and substantial peak memory, particularly when generatinglonger videos with higher resolutions. For instance, SVD-XT generates 25 frames simultaneouslywith a resolution of 576 1024, while Sora expands these capabilities by supporting the generationof longer videos (over a minute) at a higher resolution of 10801920. Given the trends of generatinglonger videos with higher quality, the escalating memory and computation demands have impededpractical applications of these large-scale video diffusion models on various platforms. Existing model compression methods to reduce peak memory and latency, such as weight pruning , quantization , and distillation , typicallyrequire substantial retraining or fine-tuning of the compressed model to recover performance. Thisprocess is costly, time-consuming, and may raise data privacy concerns. Applying these methods inzero-shot avoids the expensive retraining, but leads to severe performance degradation. Furthermore,the variety and complexity of video diffusion architectures further complicate the model optimization.Therefore, it is challenging yet crucial to develop an effective and efficient video diffusion frameworkwith reduced computations, smaller peak memory and less data (no re-training) requirements for itswide applications. To address the above challenges, we first identify the sources of the high computation and memorycost, which scale up with the iterative denoising process and the simultaneous processing of multipleframes. We further observe that the feature maps of certain layers may exhibit high similaritybetween multiple consecutive denoising steps due to the temporal property of videos, enablingfurther optimizations for acceleration. Based on that, we propose a training-free framework namedStreamlined Inference, by leveraging the temporal and spatial characteristics of video diffusion modelsto effectively reduce peak memory and computational demands. Our framework contains three corecomponents: Feature Slicer, Operator Grouping, and Step Rehash, which work together closely andcomprehensively with different focuses on peak memory reduction or inference acceleration. Our Feature Slicer performs lossless feature slicing in both temporal and spatial layers, raising thepossibility of peak memory reduction through processing smaller features. However, the featureslicer alone is not able to decrease peak memory as we still need to store all intermediate results ofone layer for all sliced features to form a complete intermediate feature map for the next layer. Toreduce peak memory practically, we further propose Operator Grouping to group homogeneous andconsecutive operators in the computational graph. Within each operator group, the intermediate resultof one sliced feature can be directly sent to the next operator/layer without waiting for aggregationwith all other intermediate results, achieving the full potential of Feature Slicer to reduce the peakmemory. Furthermore, a pipeline technique is proposed to accelerate the computations of the sameoperator group for multiple sliced feature inputs, with improved parallelism. Moreover, observing the high similarity of certain features between multiple consecutive denoisingsteps, we propose Step Rehash to reuse the generated features for a few following steps due to theirhigh similarity, skipping the exact expansive and repetitive generation of similar features and therebyaccelerating the video diffusion significantly. With this framework, we can generate high-quality videos in a fast and memory-efficient manner on a single consumer GPU, as shown in . Forexample, the peak memory of AnimateDiff can be reduced significantly from 41.7GB to 11GB,featuring inference on a typical consumer GPU 2080Ti. We summarize our contributions as follows: We propose a novel training-free framework that can significantly reduce the peak memoryand computation cost for the inference of video diffusion models by leveraging the spatialand temporal characteristics of video diffusion models. Our approach can be seamlessly integrated into existing video diffusion models. Ourextensive experiments on SVD, SVD-XT, and AnimateDiff demonstrate our effectiveness toreduce peak memory and accelerate inference without sacrificing quality.",
  "Related Work": "Video Diffuison Models. For video generation, various approaches have been proposed, withVDM as a leading example. VDM transforms the conventional U-Net architecture of imagediffusion models into a 3D U-Net structure, employing joint training on both images and videos.MagicVideo is the first work that introduces Latent Diffusion Model (LDM) for text-to-video(T2V) generation in latent space. LVDM introduces a mask sampling technique that enhancesits longer video generation capability. ModelScope incorporates spatial-temporal convolutionand attention into LDM. Video LDM trains a T2V network composed of three training stages,enabling higher quality and longer video generation. Show-1 first introduces the fusion ofpixel-based and latent-based diffusion models for T2V generation. Recently, Stable Video Diffusion(SVD) identifies three key stages for training video LDMs: text-to-image (T2I) pretraining, videopretraining, and high-quality video finetuning. Architectural Efficiency of Video Diffusion Models. There are various research efforts exploringeither architectural efficiency or model compression techniques for image/video generation. Forexample, ED-T2V freezes parameters to reduce training costs and proposes a attention mecha-nism to ensure temporal coherence. SimDA devises a parameter-efficient training approach bymaintaining the parameter of the T2I model and uses two adapters to train it. For model compression,Diff-pruning employs structural pruning techniques to reduce inference time at each samplingstep. Additionally, the work implements quantization on diffusion models using low-precisiondata types. However, these methods take substantial efforts to retrain or finetune the diffusion modelto recover performance, which is costly, time-consuming, and may raise data privacy concerns.Furthermore, applying post-training compression techniques in one-shot may save theretraining/fine-tuning efforts, but suffers from significant performance degradation. Sample-Efficient Video Diffusion Models. To address the iterative denoising process in diffusionmodels and improve the sampling efficiency, two approaches are proposed. The first approach focuses on creating rapid solvers to resolve the differential equation associated with thedenoising process more effectively. The works utilize knowledge distillation methods tocompress and simplify the sampling trajectory efficiently, thereby enhancing overall performance.Imagen video is one of the first methods to apply progressive distillation on video diffusionmodels, incorporating guidance and stochastic samplers. Recent work Deepcache proposes anovel training-free paradigm that accelerates diffusion models by reusing the high-level features.",
  "Motivation": "Peak memory and computation analysis.Existing open-source video diffusion models typically adopt a pretrained T2I 2D-UNet as backbone. Their temporal layers are seamlesslyintegrated into the backbone 2D-UNet, positioned after every spatial layer. Here, we use SVD asan example to demonstrate how peak memory and computational overhead scale with the numberof frames. The SVD model is trained with two distinct configurations: regular SVD is designed togenerate 14 frames, while SVD-XT is tailored to produce 25 frames. To generate 14 or 25 videoframes concurrently with SVD, its latent features require massive GPU memory and computationconsumption, estimated to be approximately 14 or 25 higher than its base T2I model. This OursNaive",
  ": The quality results of our method and nave slicing. Note that nave slicing will incurunpleasant artifacts due to lack of temporal correction by fewer frames": "estimate does not even account for the additional memory required by SVDs extra-temporal layers.More specifically, the SVD consumes 39.49G of peak memory for 576 1024 resolution output,whereas its image generation counterpart only requires 6.33G of memory at the same resolution.Furthermore, incorporating the classifier-free guidance substantially enhances the generationquality but doubles the peak memory required during inference. Consequently, video diffusion is computationally demanding, but the challenge of memory con-sumption is more critical and demands immediate attention. Most consumer-grade GPUs do nothave enough memory for video diffusion models and, therefore, suffer from the Out of Memoryerror, which prevents the GPU from generating high-quality videos. There is no workaround withoutswitching GPUs. Most users have to endure generating short and low-resolution videos. Nave Slicing.A Nave approach to reduce peak memory is to execute the video diffusion inferenceclip-by-clip. However, this strategy is hindered by the temporal layers, which are essential formaintaining temporal correlation in video diffusion models. Forcibly implementing this approachcan generate random artifacts and cause motion vanishing in the output video, as detailed in .Therefore, designing a memory-efficient inference framework is a challenging and non-trivial task.",
  "Streamlined Inference Framework": "To address the above massive peak memory and computation costs, in this section, we propose atraining-free framework named Streamlined Inference, which is composed of three core components:Feature Slicer, Operator Grouping, and Step Rehash. First, we discuss Feature Slicer, designedto partition input features of spatial and temporal layers, and enable the potential of massive peakmemory reduction. Next, we introduce our Operator Grouping technique to aggregate homogeneousand consecutive operators into the same group, achieving the full potential of Feature Slicer to reducepeak memory through reusing the memory of intermediate result from previous sliced feature. Finally,we discuss our Step Rehash method to reuse the same feature for a few consecutive steps due to theirhigh similarity. It accelerates the inference without increasing peak memory overhead as it skipscertain denoising steps with less computations.",
  "Feature Slicer": "Video diffusion models contain spatial and temporal layers which extract the corresponding infor-mation from their specific domains. On this basis, we propose a feature slicer that consists of twocomponents: Spatial-layer slicer and Temporal-layer slicer, to divide the feature map into multiplebatches/sub-features, ensuring accurate computation without introducing additional operations. Theslicer is further utilized for Operator Grouping to reduce peak memory cost. Spatial layers slicer.Based on our profiling (more details can be found in Appendix A) for memoryallocation of various video diffusion models, we find that performing slices at spatial layers cangreatly reduce the memory footprint. The 5-D feature in the spatial layer X RBT CHW can be reshaped to a 4-D feature X R(BT )CHW , where B, T, C, H, W are the batch size,number of frames, channels, height, and width, respectively. Thus, we slice it into k sub-features,Xi RniCHW ki=1, where ni = B T/k with denoting the least integer greater thanor equal to the input. If B T/k = B T/k, the dimension of the last sub-feature nk is different Fea.",
  "from others. The spatial layer slicer is applicable for most operations in spatial layers such as Conv2D,GroupNorm, LayerNorm, Attention, and Linear": "Temporal layers slicer.The input of the temporal layer is a 5-D feature map with dimensions{batch, channels, frames, height, width}. 3-D operations such as Conv3D are employed to extracttemporal information from the 5-D feature. Differing from spatial layers, slicing along the temporaldimension may disrupt the extraction and processing of temporal information. Therefore, we keepthe temporal dimension untouched while slicing over other dimensions. Specifically, the 5-D featureX RBT CHW can be sliced to kh kw sub-featuresXij RBT Chiwji=kh,j=kwi=1,j=1,where hi = H/kh and wj = W/kw. After detailed profiling different configurations for temporallayer slicer, we discover that the configuration with kh = max (H, 16) and kw = max (W, 16) canresult in promising peak memory reduction.",
  "Operator Grouping": "Although Feature Slicer converts the original feature map into multiple smaller sub-features withreduced memory footprint, the peak memory can not be reduced since the intermediate results ofmultiple sliced features require re-consolidation to send to the next layer/operator as inputs. It stillneeds to store all intermediate outputs of sliced features to form the united/unsliced intermediatefeature map without actual peak memory reduction. Therefore, to address this problem, we proposeOperator Grouping to group the operators accordingly in the computational graph, achievingthe full potential of Feature Slicer with effective peak memory reduction due to less memoryreserved for intermediate results. Furthermore, a pipeline technique is proposed to optimize theinference of operator groups with improved parallelism and practical acceleration.",
  "Grouping Operators for Peak Memory Reduction": "Operator Grouping directly re-uses existing operators by aggregating consecutive homogeneousoperators into the same group. Homogeneous operators indicate these operators extract features fromcoherent domains and dimensions. In video diffusion models, different operators can be groupedinto GroupOPt (temporal operator groups) and GroupOPs (spatial operators groups) to ensurethe well-preserved semantics of sliced sub-features within each group. For example, in the SVDModel , consecutive GroupNorm, Conv2D, SiLU, and Up/DownSample operators in the SpatialResBlock can be aggregated to one group, as these operators all extract features from spatial domainand are deemed homogeneous. As shown in , when computing the output feature Xo for anoperator group (GroupOP), the input feature X is sliced into multiple sub-features X1, X2, . . . , Xkwith Feature Slicer. Each sub-feature Xi goes through the operator group and their outputs areconcatenated after all outputs are available, as shown in Eq. (1),",
  "Reducing peak memory cost.As shown in , the peak memory with the operator group isdetermined by the memory footprint of the input feature, the output feature, and the intermediate": "results. Without operator grouping, all intermediate results of all operators for sliced sub-featureswill allocate their own memory, hence failing to reduce memory consumption. Compared with thecase above, grouped operators only need to allocate memory for intermediate results of a singlesliced sub-feature and the final outputs, without the necessity to allocate full intermediate featurescorresponding to the original unsliced input feature, as shown in (a) and (b). Operator Groupingcan effectively reduce peak memory cost, enabling successful inference of video diffusion models onone single consumer or commercial GPU with low or moderate available memory, as shown in Tab. 1. Mitigating I/O intensity.As the original feature map is sliced into multiple sub-features to reducepeak memory cost, the computation may slow down due to multiple iterations corresponding to multi-ple inputs. However, we surprisingly observe that even with the naive basic for-loop implementationfor each sub-feature as shown in (b), the overall runtime with Operator Grouping is around 10%slower than that of the original unsliced version. The marginal increase in runtime can be attributedto the memory bound of the GPU for video diffusion inference. Specifically, current video diffusionmodel inference suffers from the memory bound, where the I/O overhead of intermediate results ismore notorious than their computation workload. The slicer provides a solution to mitigate the I/Oburden, thus balancing the computation and memory read/write to fully utilize the GPU capacity.",
  "Pipelining with Improved Parallelism and Practical Acceleration": "With the proposed Feature Slicer and Operator Grouping, the peak memory will decreasesignificantly with a marginal increase for the computation runtime (based on the basic for-loopimplementation). With a deeper investigation for the computation patterns, we find that the for-loopimplementation cannot maximize GPU parallelism, and further employ the pipelining technique tooptimize the for-loop implementation for faster inference without additional memory cost. With Operator Grouping, there are multiple operators in one group to process one sliced sub-feature sequentially. With the naive for-loop implementation, before feeding each sliced sub-featureinto another operator group, it needs to wait until the last sub-feature finishes its computation withinthe group. The parallelism can be further improved with the proposed pipeline method. Specifically,in an operator group, after a sliced feature map is computed by the out-of-place computationoperator (e.g., Conv, GroupNorm, Attention, etc.) and sent to the next operator, its previousallocated memory is no longer required, but it is still reserved during inference, leading to resourcewaste. We can pipeline all operators in the same group to mitigate this issue. As shown in (c),once the Conv operator completes processing a sliced feature Xi as described in Eq. (1) and itsoutputs are sent to the next operator Norm, the subsequent sliced feature Xi+1 is immediately pipedinto the same Conv operator, reusing the reserved memory of Xi. In this way, multiple operators areexecuted simultaneously with improved parallelism. No additional memory is required, as we onlymake use of previously reserved memory. Acceleration performance. With the naive for-loop implementation, only one operator in an operatorgroup is executed at a time. However, our pipeline method can simultaneously execute multipleoperators (such as Conv, Norm, and Activation as depicted in (c)) without incurring additionalmemory. Consequently, the inference speed can be further improved. Accordingly, integrating thepipeline within Operator Grouping can mitigate 10% speed degradation caused by feature slicing.",
  "Step Rehash": "In this section, we further introduce our step rehash method to optimize the iterative denoising stepsfor effective acceleration in video diffusion generation. Capitalized on the high similarity betweenadjacent steps, our approach accelerates the video generation, while ensuring both high quality andtemporal consistency across video frames, without extra memory cost. Next we first discuss ourobservations for the high feature similarity and then explain details of our step rehash.",
  "Similarity of Temporal Features between Steps": "Similarity visualization.The denoising process of U-Net in diffusion models requires multiplesteps and the features of different steps may share certain similarities with minor differences .To explore this, we analyze the feature maps averaged over multiple images at different parts of themodel and plot the similarity between features of different steps, with an example shown in (and more results and details demonstrated in Appendix C). We find two key insights below: The similarity between adjacent steps significantly depends on certain blocks and layers,and it may change sharply after specific operations in video diffusion. The features do notalways show high similarity. For example, neither deeper layers within the same block northose in middle blocks consistently show higher similarity between adjacent steps.",
  ": The high similarity of output features aftertemporal layers in U3 between each timestep": "High similarity after temporal layers. Ex-isting video diffusion models typically em-ploy pretrained image diffusion models astheir backbone. While these image mod-els are trained to produce a variety of im-ages, the addition of temporal layers is de-signed to improve the temporal continuityof latent features. This enhancement signif-icantly strengthens their correlation, therebyincreasing similarity among the features. Motivation and challenges for step rehash.Due to the high similarity between features of different steps, we propose the step rehash method toskip the computation of certain features by reusing previous generated features. However, we need toaddress the challenges of when and where to skip. Specifically, based on the above insights, simplyreusing features from deeper layers does not guarantee better results since deeper layers may notshow high similarity. We need to carefully choose what layers or blocks can be skipped (where toskip) to make use of high similarities without significantly downgrading the generation performance.As shown in fig. 5, it exhibits high similarity between adjacent time steps, but the similarity patterndiffers between video diffusion models. Thus, we need to determine which steps can use skip strategy(when to skip), and the remaining steps that require full computation are full computation steps.",
  ": Illustration of Step Rehash.Computation in grey areas are skipped": "Here we specify the details of our step rehash. The videodiffusion models typically use a U-Net architecture with 4down-sampling and 4 up-sampling blocks, and their outputfeatures can be represented by Ds03 and U s03, respectively,with s denoting the current step number as shown in .Typically, U sb is obtained by feeding Dsb and U sb1 into thebth (b > 0) up-sampling block, and U s3 is the final outputof the sth step. Based on similarity analysis, in the nextstep s + 1, we can directly reuse the output features of thetemporal layer from the previous step s without actual exactcomputations. Our insights into the similarity indicate thatdeeper and middle blocks do not consistently demonstratehigh similarity. Reusing their features results in significant degradation of generation quality. There-fore, we rehash features of the temporal layer in the final up-sampling block. Specifically, to obtainU s+13for step s + 1, we feed the output features of the temporal layer from U s3 (current full compu-tation step) into the final up-sampling block. Note that we only compute part of U s+13and do notneed to compute Ds+13for concatenation, since our reused temporal layer is deeper than the concatoperator for features from Ds+13, as shown in . We further propose a step search algorithm tosolve the when to skip problem, algorithm details can be found in Appendix B.",
  "Models, Datasets and Evaluation Metrics": "We conduct the experiments on representative video diffusion models, including SVD , SVD-XT, and AnimateDiff . For evaluation, we use the following evaluation protocols: The firstframe of the video clips are extracted as the image condition for image-to-video generation and theircaptions are considered as the prompts. All experiments are conducted on a NVIDIA A100 GPU.",
  "Original758.728.8921.83G9.65s41.71G24.38sNave Slicing2403.926.637.22G19.98s9.92G38.69sOurs784.528.717.51G7.08s11.07G15.15s": "Zero-shot UCF-101 : We sample clips from each categories of UCF-101 dataset, and gather asubset with 1,000 video clips for evaluation. Their action categories are considered as their captions.For SVD and SVD-XT, our samples are generated at a resolution of 576 1024 (14 frames for SVDand 25 frames for SVD-XT) and then resize to 240 320. For AnimateDiff, we generate sampleswith resolution 512 512 (16 frames). Zero-shot MSR-VTT : We generated a video sample for each of the 9,940 development prompts.The samples are at resolution 320 576 then resized to 240 426 for all models with differentnumber of generated frames.",
  "Metrics: We compute the FVD as outlined in and CLIP-Score using TorchMetrics tomeasure the performance of generated samples": "Baseline: We use pretained weight for SVD (I2V) and AnimateDiff (T2V). We compare the pro-posed Streamlined Inference (use 13 full computation steps) with the original inference (use 25full computation steps) and nave slicing inference as mentioned in Sec.3. More specifically, forimage-conditioned SVD model, we set each nave slice with a frame size of 2 and use the last framesof each generated slice as the image condition for the next slice. For AnimateDiff, we evenly generate4 slices with a frame size of 4, then combine them into a full video clip.",
  "Quantitative Evaluation": "The results from demonstrate the effectiveness of our proposed method in managing memory,computational resources, and performance. Our method significantly reduced peak memory andlatency while maintaining competitive FVD and CLIP-Score values across all three models andresolutions compared to the original method. For SVD, our method achieved a notable reduction inpeak memory and latency while maintaining competitive FVD and CLIP-Score, unlike Nave Slicing,which increased FVD and latency. For SVD-XT, our method improved over Nave Slicing andbalanced resource usage and performance. For AnimateDiff, our method significantly outperformedNave Slicing in FVD and latency, achieving nearly the same performance as the original method butwith smaller latency and around a 70% reduction in peak memory.",
  "Ablation Study": "Our ablation study in demonstrates that our Step Rehash method consistently outperformsDeepCache with the same number of full computation steps. Step Rehash skips more computa-tions than DeepCache. For the SVD model, our method maintains competitive CLIP-Scores whileslightly increasing FVD compared to the original method (FVD of 307.7 and CLIP-Score of 29.25on UCF101). DeepCache performs poorly, increasing FVD and reducing video quality. For theAnimateDiff model, our method maintains stable FVD (603.9 vs. 607.13) and CLIP-Score (29.29 vs.29.40) on MSR-VTT compared to the original method. DeepCache shows the worst performanceon UCF101, with higher FVD and lower CLIP-Scores. Visual comparisons of our method withDeepCache are provided in Appendix D.",
  "Conclusion and Limitation": "In this paper, we propose a novel training-free framework that significantly reduces peak memory andcomputation costs for video diffusion model inference by leveraging its spatial and temporal charac-teristics. Our approach can be seamlessly integrated into existing models. Extensive experiments on SVD, SVD-XT, and AnimateDiff demonstrate our methods effectiveness in reducing peak memoryand accelerating inference without sacrificing quality. Our approach offers a new perspective for fast,memory-efficient video diffusion, enabling the generation of higher quality and longer videos onconsumer-grade GPUs. Though our method is general, the efficiency is limited by baseline modelarchitecture design.",
  "Fan Bao, Chongxuan Li, Jun Zhu, and Bo Zhang. Analytic-dpm: an analytic estimate of theoptimal reverse variance in diffusion probabilistic models. arXiv preprint arXiv:2201.06503,2022": "Andreas Blattmann, Tim Dockhorn, Sumith Kulal, Daniel Mendelevitch, Maciej Kilian, Do-minik Lorenz, Yam Levi, Zion English, Vikram Voleti, Adam Letts, et al. Stable video diffusion:Scaling latent video diffusion models to large datasets. arXiv preprint arXiv:2311.15127, 2023. Andreas Blattmann, Robin Rombach, Huan Ling, Tim Dockhorn, Seung Wook Kim, SanjaFidler, and Karsten Kreis. Align your latents: High-resolution video synthesis with latentdiffusion models. In Proceedings of the IEEE/CVF Conference on Computer Vision and PatternRecognition, pages 2256322575, 2023.",
  "Elias Frantar, Saleh Ashkboos, Torsten Hoefler, and Dan Alistarh. Gptq: Accurate post-trainingcompression for generative pretrained transformers. arXiv preprint arXiv:2210.17323, 1, 2022": "Songwei Ge, Aniruddha Mahapatra, Gaurav Parmar, Jun-Yan Zhu, and Jia-Bin Huang. Onthe content bias in frchet video distance. In Proceedings of the IEEE/CVF Conference onComputer Vision and Pattern Recognition (CVPR), 2024. Yifan Gong, Zheng Zhan, Qing Jin, Yanyu Li, Yerlan Idelbayev, Xian Liu, Andrey Zharkov,Kfir Aberman, Sergey Tulyakov, Yanzhi Wang, et al. E2gan: Efficient training of efficient gansfor image-to-image translation. arXiv preprint arXiv:2401.06127, 2024. Yuwei Guo, Ceyuan Yang, Anyi Rao, Yaohui Wang, Yu Qiao, Dahua Lin, and Bo Dai. Ani-matediff: Animate your personalized text-to-image diffusion models without specific tuning.arXiv preprint arXiv:2307.04725, 2023. Yang He, Ping Liu, Ziwei Wang, Zhilan Hu, and Yi Yang. Filter pruning via geometric medianfor deep convolutional neural networks acceleration. In Proceedings of the IEEE Conference onComputer Vision and Pattern Recognition (CVPR), 2019.",
  "Yingqing He, Tianyu Yang, Yong Zhang, Ying Shan, and Qifeng Chen. Latent video diffusionmodels for high-fidelity long video generation. arXiv preprint arXiv:2211.13221, 2022": "Jack Hessel, Ari Holtzman, Maxwell Forbes, Ronan Le Bras, and Yejin Choi. Clipscore: Areference-free evaluation metric for image captioning. In Proceedings of the 2021 Conferenceon Empirical Methods in Natural Language Processing, pages 75147528, 2021. Jonathan Ho, William Chan, Chitwan Saharia, Jay Whang, Ruiqi Gao, Alexey Gritsenko,Diederik P Kingma, Ben Poole, Mohammad Norouzi, David J Fleet, et al. Imagen video: Highdefinition video generation with diffusion models. arXiv preprint arXiv:2210.02303, 2022.",
  "Muyang Li, Ji Lin, Chenlin Meng, Stefano Ermon, Song Han, and Jun-Yan Zhu.Effi-cient spatially sparse inference for conditional gans and diffusion models. arXiv preprintarXiv:2211.02048, 2022": "Xiuyu Li, Yijiang Liu, Long Lian, Huanrui Yang, Zhen Dong, Daniel Kang, Shanghang Zhang,and Kurt Keutzer. Q-diffusion: Quantizing diffusion models. In Proceedings of the IEEE/CVFInternational Conference on Computer Vision, pages 1753517545, 2023. Yanyu Li, Pu Zhao, Geng Yuan, Xue Lin, Yanzhi Wang, and Xin Chen. Pruning-as-search:Efficient neural architecture search via channel pruning and structural reparameterization. arXivpreprint arXiv:2206.01198, 2022. Jiawei Liu, Weining Wang, Wei Liu, Qian He, and Jing Liu. Ed-t2v: An efficient trainingframework for diffusion-based text-to-video generation. In 2023 International Joint Conferenceon Neural Networks (IJCNN), pages 18, 2023. Cheng Lu, Yuhao Zhou, Fan Bao, Jianfei Chen, Chongxuan Li, and Jun Zhu. Dpm-solver:A fast ode solver for diffusion probabilistic model sampling in around 10 steps. Advances inNeural Information Processing Systems, 35:57755787, 2022.",
  "Zhen Xing, Qi Dai, Han Hu, Zuxuan Wu, and Yu-Gang Jiang. Simda: Simple diffusion adapterfor efficient video generation. arXiv preprint arXiv:2308.09710, 2023": "Jun Xu, Tao Mei, Ting Yao, and Yong Rui. Msr-vtt: A large video description dataset forbridging video and language. In 2016 IEEE Conference on Computer Vision and PatternRecognition (CVPR), pages 52885296, 2016. Changdi Yang, Pu Zhao, Yanyu Li, Wei Niu, Jiexiong Guan, Hao Tang, Minghai Qin, Bin Ren,Xue Lin, and Yanzhi Wang. Pruning parameterization with bi-level optimization for efficientsemantic segmentation on the edge. In Proceedings of the IEEE/CVF Conference on ComputerVision and Pattern Recognition, pages 1540215412, 2023. Zheng Zhan, Yifan Gong, Pu Zhao, Geng Yuan, Wei Niu, Yushu Wu, Tianyun Zhang, MalithJayaweera, David Kaeli, Bin Ren, et al. Achieving on-mobile real-time super-resolutionwith neural architecture and pruning search. In Proceedings of the IEEE/CVF internationalconference on computer vision, pages 48214831, 2021. Zheng Zhan, Zhenglun Kong, Yifan Gong, Yushu Wu, Zichong Meng, Hangyu Zheng, XuanShen, Stratis Ioannidis, Wei Niu, Pu Zhao, and Yanzhi Wang. Exploring token pruning in visionstate space models. arXiv preprint arXiv:2409.18962, 2024. David Junhao Zhang, Jay Zhangjie Wu, Jia-Wei Liu, Rui Zhao, Lingmin Ran, Yuchao Gu,Difei Gao, and Mike Zheng Shou. Show-1: Marrying pixel and latent diffusion models fortext-to-video generation. arXiv preprint arXiv:2309.15818, 2023. Shiwei Zhang, Jiayu Wang, Yingya Zhang, Kang Zhao, Hangjie Yuan, Zhiwu Qin, Xiang Wang,Deli Zhao, and Jingren Zhou. I2vgen-xl: High-quality image-to-video synthesis via cascadeddiffusion models. arXiv preprint arXiv:2311.04145, 2023. Yihua Zhang, Yuguang Yao, Parikshit Ram, Pu Zhao, Tianlong Chen, Mingyi Hong, YanzhiWang, and Sijia Liu. Advancing model pruning via bi-level optimization. Advances in NeuralInformation Processing Systems, 35:1830918326, 2022.",
  "(b) w/ our method": "Figure A1: GPU memory snapshot of active cached segment timeline for Stable Video Diffusion with14 frames 512 512We provide memory snapshots under different configurations during inference, demonstrating theeffectiveness of memory reduction. An example is shown in Fig.A1. This example shows the memoryreduction of our method on SVD with 512 512 resolution. The snapshot is collected following thetutorial2.",
  "BKey Step Search for Step Rehash": "Example of Step Rehash. For step s + 1, we only conduct part of the computations in the finalup-sampling block, skipping most of the computations in the U-net. Similarly, we can skip multiplesteps. For example, if we skip both step s + 1 and s + 2, to obtain the output U s+23for step s + 2,we feed the output features U s+13into the final up-sampling block of step s + 2, where U s+13is alsoobtained from U s3 following the above reusing and skipping method. Similarity patterns. The feature similarity between different steps exhibits certain patterns. Asshown in a, at initial steps, the similarity is high (above 97%) across multiple steps such asfrom step 0 to step 13. In the middle steps, the high similarity only appears within a small step range.For example, the similarity between step 17 and step 19 is lower than 93%. In the final steps, thehigh similarity appears in a slightly larger step range, such as from step 20 to step 22, with above93% similarity.Algorithm 1 Key step search in step re-hashRequire: The similarity map S, the sim-ilarity threshold , the maxi-mum step number K",
  "G GK 1return G": "We address the where-to-skip problem with a fixed strategyto skip the computations from the specific blocks. Next,we address the when skip problem to choose what stepscan be skipped based on the similarity map. Given thesimilarity map as shown in a, the similarity valuebetween step i and j can be represented by Sij as shownin the similarity map. We develop a search method to findthe key steps with feature rehash and skip the other steps. The algorithm is shown in Algorithm 1. We use a thresh-old to select the key steps. If the similarity of multipleconsecutive steps is above the threshold, we only selectthe start and end steps as key steps, and the middle stepscan be skipped. Typically, a larger threshold leads to morekey steps with high generation performance close to theoriginal one, and a smaller threshold leads to skipping more steps and, thus, computations with fastergeneration.",
  "Figure A6: Quality evaluation of using our method on baseline models": "a black audi car is on the road AnimateDiffOursAnimateDiffOursAnimateDiffOursAnimateDiffOursAnimateDiffOurs a animated video playing the song twinkle twinkle little star a boat in a lego game shoots missles a group of people harvesting stick rice in field a battle involving tanks is shown a young mouse runs on soil ground and runs in an exercise wheel harry ritchie is talking about drama and what drama really is a woman with a yellow and gray checked backpack walks next to a small waterfall a man with suit talking in front of the camera the natural scenes of the mountains are very nice and wonderful to see"
}