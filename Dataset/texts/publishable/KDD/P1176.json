{
  "Charles NicholasUniv. of Maryland, Baltimore": "AbstractMachine learning (ML)-based malware detection systemsare becoming increasingly important as malware threats in-crease and get more sophisticated. PDF files are often usedas vectors for phishing attacks because they are widely re-garded as trustworthy data resources, and are accessibleacross different platforms. Therefore, researchers have de-veloped many different PDF malware detection methods.Performance in detecting PDF malware is greatly influencedby feature selection. In this research, we propose a small fea-tures set that dont require too much domain knowledge ofthe PDF file. We evaluate proposed features with six differ-ent machine learning models. We report the best accuracy of99.75% when using Random Forest model. Our proposed fea-ture set, which consists of just 12 features, is one of the mostconciseness in the field of PDF malware detection. Despite itsmodest size, we obtain comparable results to state-of-the-artthat employ a much larger set of features. 1IntroductionThe flexibility and portability of PDF files makes them apopular target for malware attacks. Over time, different ap-proaches have been proposed to detect PDF malware. Ma-chine learning and neural network based models have par-ticularly shown promise in these detection tasks. However,the performance of the model relies on the quality of the fea-ture set chosen. Features used in malware detection aregrouped into two categories: dynamic and static. Dynamicfeatures are obtained from monitoring program execution,such as APIs called, instructions executed, or IP addresses ac-cessed. Conversely, static features are obtained through staticanalysis. Both categories have some limitations. Dynamic fea-tures need to be executed in a sandbox environment, wheresome sophisticated malware can detect the sandbox environ-ment and consequently alter their behaviors. Static features,on the other hand, can be obfuscated by attackers usingevasion techniques, making the detection challenging. Thisraises concerns that some commonly used features have beenthoroughly investigated by attackers. If attackers have ex-ploited these features to perform a successful evasive attack,PDF malware detection systems built on the same or sim-ilar features set might become vulnerable. This highlightsthe importance of the usage of PDF-specific features, whichmay reduce the attack surface. Earlier research, includingPDFRate, have employed some PDF-specific features such as the number and the occurrence of a specific PDF objectsfor model training, which obtained promising accuracy inPDF malware detection. Nevertheless, most of thesefeatures requires a large amount of domain knowledge toextract. Moreover, their feature sets are large and complex,which may potentially lead to over-fitting. Consequently, itsdesirable to have a simple and small PDF-specific featuresset that may achieve detection accuracy comparable to morecomplex features.In this paper, we limit the scope of PDF-specific featuresto those that are unique to PDF files, hence excluding mostdynamic features such as system call sequences, API callsequences, and some static features such as binary code. Fur-thermore, we exclude features that need extensive domainknowledge for PDF files, which means that most keyword-based features, including JavaScript code in PDF files, arenot used in our research.PDF files can be viewed as a set of interconnected ob-jects. Some work, such as Hidosts, extracts the tree struc-ture of the PDF and uses the binary counts for these pathsas features. Our previous work showed that such treestructures contain sequential relationships and can be usedto train the Time Series Model for PDF malware detection.In this paper, we propose a novel set of graph features toaccurately detect PDF malware. We investigated multipletypes of graph tree features by parsing a PDF file into treerepresentative features. For specific feature types, our re-search demonstrated statistical differences between benignand malicious PDFs. Using the proposed feature set to train amachine learning model, we show empirically that the modelcan successfully detect 99.75% of PDF malware samples withonly 12 features. The primary contributions of our study arethe introduction of one of the smallest PDF specific featuresets. We have conducted a thorough investigation and perfor-mance analysis of the ML - models based on these proposedfeatures. Furthermore, we benchmarked our results againststate-of-the-arts, indicating that our feature set is promising.",
  "arXiv:2308.04704v2 [cs.CR] 10 Aug 2023": "Body: The body, as the primary section of the PDF file,consists of objects that define all the operations per-formed by the file. These objects, which include bothindirect and direct objects, characterize the function-ality of each object using keywords marked with /.For example, /Length and /Filter are such keywords.Indirect objects, which start with a numeric identifierlike 4 0 R, contain information in a directory and canbe referenced by other objects. For example, an objectstarting with 1 0 R can be referred to by other ob-jects using 1, the sequence number. This structureallows for the interconnection of objects. The gener-ation number, usually set to 0, is represented by thesecond digit, although it can be other number in somecases. Objects are usually end with the endobj marker.A specific type of object, known as a stream, startswith the keyword stream and ends with endstreamand endobj. The content of the stream object, whichincludes elements like images and texts, is encodedusing filters. Cross-reference table: This table contains the locationreferences for each object. A PDF parser uses this tableto find the object reference in the memory for parsing.The cross-reference table, marked by Xref followedby numbers, indicates the total number of objects inthe references with its last number. For instance, 0 16indicates a total of 16 objects in the cross-referencetable. Trailer: trailer contains information about the file suchas the number of objects using keyword /Size. It alsocontains a reference to the root object using keyword/Root and metadata using keyword /Info. The file struc-ture organizes the logical access order for the PDF file.When a PDF reader application accesses a PDF file, itfirst locates the trailer to find the root object. Thenthe parser uses a cross-reference table to parse eachindirect object to decompress all data. In this way, thecontent of the PDF is made visible to the user. Whena modification happens in the PDF file, like insertinga page into the PDF, a new body, trailer, and cross-reference table will be appended to the original fileaccordingly, and a new version number will be gener-ated. However, because the cross-reference table setsa strict boundary for each object, removing objectsfrom the previous version can cause errors. Thus, anattacker is more likely to add features instead of re-moving features. Each object is labeled with a number, allowing it to be refer-enced by other objects. Object information is stored in thecross-reference table, while the trailer indicates the root ob-jects number and the cross-reference tables location. Byquerying the cross-reference table, catalog objects can befound. The catalog object serves as the entire documents",
  "root object, containing the PDF documents outline and thepage group objects reference": "1.2Related WorkIn the field of machine learning-based PDF malware detec-tion, two primary types of features are commonly used -static and dynamic features. The dynamic features are ob-tained by running the PDF in a controlled environment,which allows for the collection of PDF running behaviorssuch as sequences of system calls and API calls. How-ever, most dynamic features are typically not distinctive toPDF files, and the building of a robust sandbox environmentincreases the complexity of the detection process. Despitethe promising results in malware detection tasks using dy-namic features, our work primarily focuses on the use ofstatic features. Previously used dynamic and static featuresrequire significant amounts of domain knowledge for fea-ture extraction. In contrast, our goal is to employ featuresthat demand minimal domain knowledge and are unique toPDF files.There are three categories of static features. The first typeof static features are obtained from a keyword-based analy-sis, which involves searching for predefined keywords suchas /Javascript, /OpenAction, /GoTo, /URI, and /Rich-Media. These keywords are often associated with maliciouscode injection. Features can include the number of keywordsor simply their presence. The malicious payloads are usuallyinserted into objects associated with such keywords, mak-ing them useful features for PDF malware detection. Thesecond type of static features are obtained through a treestructure-based analysis. This method constructs the objecttree representation to capture the connections between items.The tree structure can provide insights into the hierarchi-cal connections between the objects of the PDF file, which may reveal malware-related behaviors. Lastly, static featurescan be obtained using code-based analysis, which focuses onmalicious strings and functions in Javascript code. As PDFmalware often manipulates Javascript code to execute mali-cious activities, the presence of specific code strings or func-tions may indicate the presence of malware. PDF malwaredetectors may employ one or more of the features describedabove. One such example is Hidost, a system that usesthe Poppler PDF parser to extract tree structural paths ofobjects in a PDF file, which are then used as features in theclassification process. Hidost is implemented with two dif-ferent models: Support Vector Machine (SVM) and RandomForest (RF). SVM is a supervised learning model thatcreates an optimal hyperplane to separate different labels. RFis a meta-estimator that integrates different decision treesto improve classification accuracy. The researchers trainedtheir model using a dataset of 10,000 randomly selected files,maintaining a malicious-to-benign ratio of 1:1. The completePDF dataset comprised 407,037 benign and 32,567 maliciousfiles. The Hidost system has 99.8% accuracy and less than0.06% false positive rate for both models.The PDFrate classifier is implemented using an RF algo-rithm with 99% accuracy and 0.2% false positive rate overthe Contagio malware dataset. PDFrate uses the metadata,which includes the names of the files authors, the size of thefile, its location, and the amount of certain keywords, and thecontent of the PDF files as features. The authors manuallydefine the feature set, which has 202 features in all, includingcounts for different keywords and specific fields in the PDF.Examples include the number of characters in the authorfield, the quantity of endobj keywords, the total number ofpixels in all the photos, the quantity of JavaScript markers,etc. The Mimicus implementation of PDFrate, claiming toget a close approximation, only makes use of 135 of these fea-tures. The two versions of PDFrate, PDFrate-v1 and PDFrate-v2, each use a different machine learning model. Theclassifiers in PDFrate-v2 use mutual agreement to implementan ensemble technique. The term uncertain is introducedinto the classifier voting, where rates of 2550% are regardedas benign uncertainty and rates of 5075% as malicious un-certainty.PjScan is a tool that concentrates on examining JavaScriptcode. It uses Poppler as a parser to extract tokens fromJavaScript code, and a one-class SVM as a classifier. PjScanachieved 85% detection accuracy. Malware Slayer is availablein two variants. The original Slayer extracts keywordfeatures from PDF files using a pattern recognition methodand labels samples using a random forest algorithm. SlayerNEO uses the PeePDF and Origami parsers to extractstructural data as features and the AdaBoost algorithm forclassification.Maryam et al. proposed a PDF malware detection sys-tem based on stacking learning. Their approach is based on the idea that combining different classifiers could pro-duce improved accuracy as each classifier operates based onunique data assumptions. Their feature set included ten gen-eral features, such as PDF size and title character count, aswell as structural features such as the amount of keywordsand objects. These extracted features were initially fed intoa base layer consisting of SVM, Random Forest, MLP, andAdaBoost. The prediction outputs from this layer were subse-quently fed into a meta-layer featuring Logistic Regression,K-Nearest Neighbors, and Decision Trees. Their reportedmetrics on the hybird dataset including Contagio datasetwere impressive: an accuracy of 99.98%, precision of 99.84%,recall of 99.89%, and an F1 score of 99.86%.",
  "Statistical Analysis of a Feature Set": "We now introduce our proposed feature set. We use the Con-tagio dataset, which includes 9,000 benign and 10,982 mali-cious PDF samples, to extract features. This dataset waschosen due to its accessibility and its large number of labeledsamples. We used the pdfrw library to extract tree structurepaths for each file, and while some samples were corrupted,we were able to successfully extract path objects from 7,396benign PDF files and 10,814 malicious PDF files. Ourfeature selection strategy is to minimize required domainknowledge during feature extraction. Consequently, despitethe promising results achieved by keyword-based features inother research, we chose not to use them. We have alreadynoted that a PDF can be represented as a tree structure of ob-jects, prompting our investigation into graph features. Ourselection of features was facilitated by comparing mean val-ues, standard deviations with 95% CI and Quantiles. This ledus to select the following features:",
  "Malicious PDFQuantiles75%50%25%": "avg children1.76191.57581.5714avg clustering coefficient0.06980.04130.0374avg degree333avg shortest path0.60.55950.4542degree assortativity-0.2821-0.3126-0.3405density0.08810.07860.0686depth444median children111num edges403733num leaves101010num nodes272121var children4.18144.02723.6734 Note that , , and show asignificant difference in the proposed feature set between be-nign and malicious PDFs. The statistical difference betweenbenign and malicious PDFs is further visualized in the boxplots ( and ), providing clear graphical rep-resentations of these differences. We excluded the mediandegree, depth, and median children from the box plots sincethey are discrete values.",
  "BenignMalicious95% CI Mean95% CI Mean": "avg children1.8601 - 1.90441.6359 - 1.6469avg clustering coefficient0.0372 - 0.03920.0501 - 0.0512avg degree3.1385 - 3.22992.8545 - 2.8762avg shortest path0.8079 - 0.82790.5430 - 0.5498degree assortativity-0.4589 - -0.4541-0.3071 - -0.3033density0.0205 - 0.02130.0764 - 0.0772depth4.2561 - 4.28313.9594 - 3.9692median children0.1506 - 0.19420.9405 - 0.9612num edges441.5762 - 471.6670 43.8435 - 45.6364num leaves152.1234 - 157.9772 12.2298 - 12.7902num nodes201.8999 - 209.8423 25.4634 - 26.2143var children114.7908 - 122.05344.8081 - 5.34606",
  "BenignMalicious95% CI SD95% CI SD": "avg children0.9561 - 0.98740.2881 - 0.2959avg clustering coefficient0.0427 - 0.04410.0274 - 0.0282avg degree1.9738 - 2.03850.5662 - 0.5815avg shortest path0.4358 - 0.45000.1759 - 0.1806degree assortativity0.1097 - 0.11330.1005 - 0.1032density0.0230 - 0.02380.02047 - 0.0210depth0.5867 - 0.60590.2579 - 0.2648median children0.9462 - 0.97720.5416 - 0.5563num edges649.6877 - 670.9714 46.9322 - 48.2001num leaves126.3856 - 130.5260 14.6701 - 15.0664num nodes171.4772 - 177.0948 19.6561 - 20.1871var children156.8088 - 161.9459 14.0821 - 14.4626 extract tree structure paths for each file, and (as mentionedabove) we were able to successfully extract path objects fromthe 7,396 benign PDF files and 10,814 malicious PDF files.We use scikit-learn to evaluate the models performance.The confusion matrix we used is shown as",
  ". Box plot of the malicious PDFs. Features are onthe y-axis": "95% Confidence Interval (95% CI) of the Precision, Recall in and 95% CI F1 score in . The recall value in-dicates the ratio of samples have been correctly classified.We report the best recall value for the malicious class withRandom Forest, indicating that 99.73% to 99.77% of the mali-cious samples are correctly detected, while the benign classsrecall value is 0.9987 - 0.9991, which means that 99.87% to99.91% of benign samples are correctly classified.We report the Accuracy, True Positive Rate (TPR), FalsePositive Rate (FPR), False Negative Rate (FNR) and True Neg-ative Rate (TNR) in . The result indicates our proposedfeatures have good overall performance. We report the bestaccuracy of 0.9975 when using Random Forest model.",
  "Model0.99700.99700.99700.9965Model0.98800.98900.98850.9884Model0.98880.98870.98770.9869Our work0.99730.99740.99740.9975": "We report the best result obtained by applying the Ran-dom Forest model. presents the comparison of theevaluation metrics to other work. The results show that ourwork beats other work while being significantly smaller thanthe feature set they use.The main weaknesses of the feature set we propose isthat it is vulnerable to some evasive attacks. Detectors thatemploy this feature set can be compromised through theinsertion, deletion, or alteration of a subtree. In order to en-hance the robustness of the detector, one potential strategyis to enrich the feature set and diversify the feature types em-ployed. We observe that the parser did not successfully parseall objects for some malware specimens. The effectivenessof the our approach is influenced by the quality of parsedPDF objects.",
  "Conclusion": "In this work, we introduced a new features set for PDF mal-ware detection that based on PDF tree structure. Our workaimed to address the need of finding a small features setwithout needing too much domain knowledge of the PDFfile. Our work might serve as a baseline for the future inves-tigation. We do not expect our work can replace the currentused static and dynamic features now or in the future, butour work might inspire researchers with an alternative wayto build a malware detection model. In the future task, weplan to explore the other features to improve the overallperformance and enhance the robustness.",
  "Qasem Abu Al-Haija, Ammar Odeh, and Hazem Qattous. 2022. PDFMalware Detection Based on Optimizable Decision Trees. Electronics11, 19 (9 2022), 3142": "FreeDesktop.org. 2018. Poppler. Maryam Issakhani, Princy Victor, Ali Tekeoglu, and Arash Lashkari.2022. PDF Malware Detection based on Stacking Learning. In Proceed-ings of the 8th International Conference on Information Systems Securityand Privacy. SCITEPRESS - Science and Technology Publications, 562570. Pavel Laskov and Nedim rndi. 2011. Static detection of maliciousJavaScript-bearing PDF documents. In Proceedings of the 27th AnnualComputer Security Applications Conference. ACM, New York, NY, USA,373382.",
  "Konrad Rieck, Philipp Trinius, Carsten Willems, and Thorsten Holz. [n.d.]. Automatic Analysis of Malware Behavior using Machine Learning.Technical Report": "Charles Smutz and Angelos Stavrou. 2016. When a Tree Falls: UsingDiversity in Ensemble Classifiers to Identify Evasion in Malware De-tectors. In Proceedings 2016 Network and Distributed System SecuritySymposium. Internet Society, Reston, VA. Sogeti ESEC Lab. 2015. Origami. Nedim rndic and Pavel Laskov. 2013. Detection of Malicious PDF FilesBased on Hierarchical Document Structure. In Proceedings of the 20thAnnual Network & Distributed System Security Symposium. Citeseer,116.",
  "Nedim rndi and Pavel Laskov. 2016.Hidost: a static machine-learning-based detector of malicious files. EURASIP Journal on In-formation Security 2016, 1 (12 2016), 22": "Trevor Tonn and Kiran Bandla. 2013. PhoneyPDF. Weilin Xu, Yanjun Qi, and David Evans. 2016. Automatically EvadingClassifiers: A Case Study on PDF Malware Classifiers. In Proceedings2016 Network and Distributed System Security Symposium. InternetSociety, Reston, VA. Suleiman Y. Yerima, Abul Bashar, and Ghazanfar Latif. 2022. MaliciousPDF detection Based on Machine Learning with Enhanced Feature Set.In 2022 14th International Conference on Computational Intelligence andCommunication Networks (CICN). IEEE, 486491."
}