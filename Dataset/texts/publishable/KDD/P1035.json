{
  "ABSTRACT": "Placement is a critical and challenging step of modern chip design,with routability being an essential indicator of placement quality.Current routability-oriented placers typically apply an iterativetwo-stage approach, wherein the first stage generates a placementsolution, and the second stage provides non-differentiable routingresults to heuristically improve the solution quality. This methodhinders jointly optimizing the routability aspect during placement.To address this problem, this work introduces RoutePlacer, an end-to-end routability-aware placement method. It trains RouteGNN, acustomized graph neural network, to efficiently and accurately pre-dict routability by capturing and fusing geometric and topologicalrepresentations of placements. Well-trained RouteGNN then servesas a differentiable approximation of routability, enabling end-to-end gradient-based routability optimization. In addition, RouteGNNcan improve two-stage placers as a plug-and-play alternative toexternal routers. Our experiments on DREAMPlace, an open-sourceAI4EDA platform, show that RoutePlacer can reduce Total Overflowby up to 16% while maintaining routed wirelength, compared to thestate-of-the-art; integrating RouteGNN within two-stage placersleads to a 44% reduction in Total Overflow without compromisingwirelength.",
  "Hardware Placement; Wire routing; Software tools for EDA": "Permission to make digital or hard copies of all or part of this work for personal orclassroom use is granted without fee provided that copies are not made or distributedfor profit or commercial advantage and that copies bear this notice and the full citationon the first page. Copyrights for components of this work owned by others than ACMmust be honored. Abstracting with credit is permitted. To copy otherwise, or republish,to post on servers or to redistribute to lists, requires prior specific permission and/or afee. Request permissions from 24, August 2529, 2024, Barcelona, Spain 2024 Association for Computing Machinery.ACM ISBN 978-1-4503-XXXX-X/18/06...$15.00",
  "INTRODUCTION": "The development of integrated circuits (ICs) has significantly ad-vanced technology, progressing from individual chips to complexcomputing systems. Placement, among others, plays a crucial rolein the intricate design flow of circuits. It constructs geometric posi-tions of electronic components, such as memory components andlogical gates, based on topological netlists. Placement can provideinformative feedback for the preceding design stages and has aprofound effect on downstream steps, as the positions of electroniccomponents significantly influence the circuit performance.Formally, the placement problem can be expressed as follows:Consider a circuit design represented by a hypergraph = (, ),where represents the set of electronic units or cells, and repre-sents the set of hyperedges or nets between these cells. The primarygoal is to determine and to minimize wirelength while avoidingoverlap between cells, where and denote cell positions.The concept of routability is crucial when evaluating the place-ments of very-large-scale integrated (VLSI) circuits. Routabilitymeasures how effectively electrical signal pathways can be createdon a chip. Imagine placement as deciding the locations of buildingswithin a city. Routing involves designing a road network for the city.The aim is to link different sections of the city (which are cells), withroads (which are wires), while preventing excessive crowding (toprevent signal interference) and fitting within the available space(complying with the chips physical and technological limitations,such as wire width and layer spacing). Overflow, which reflects thedensity of wires, is the key indicator of routability. A lower overflow",
  "KDD 24, August 2529, 2024, Barcelona, SpainYunbo Hou, Haoran Ye, Yingxue Zhang, Siyuan Xu, and Guojie Song": "geom-edge a b c RouteGraph cell net grid cell topo-edge grid-edge(a)Circuit Design 34a 25b c 25b (b)Topo Construction (c)Circuit Layout (d)Link cell to the locating grid cell (f)Grid the layout and construct grid cell (g)Link adjacent grid cell as geom-edges (i)Graph with geom-edges and grid-edges (h)Graph with geom- edges (e)Graph with grid-edges a b c : The pipeline for converting circuit design to Route Graph: (b) Build topo-edges from cell-net connections. (f), (g), and(h): Construct grid cells and link adjacent pairs to construct geom-edges. (c), (d), and (e): Link cells to the grid cells where theyare located to construct grid-edges.",
  "(2) We introduce RouteGNN to learn accurate routability es-timations conditional on RouteGraph, an efficient hetero-geneous graph structure with topological and geometricalfeatures": "(3) We present Differentiable Geometrical Feature Compu-tation to enable gradient-based optimization. It calculatesthe gradient of cell features w.r.t. cell locations, preservingthe complete gradient flow during backward propagation. (4) We evaluate RoutePlacer on DAC2012 and ISPD2011 bench-marks, based on DREAMPlace, an open-source EDA frame-work. RoutePlacer achieves a 16% reduction in Total Over-flow while maintaining routed wirelength compared to priorstate-of-the-art (SOTA). Integrating RouteGNN within two-stage placers leads to a 44% reduction in Total Overflowwithout compromising wirelength. They show the SOTAperformance and extensibility of RoutePlacer.",
  "RELATED WORK2.1Placement": "Prior placement methods can mainly be divided into four cate-gories of methods based on their optimization strategies: Meta-heuristic methods , Reinforcement Learning (RL)methods , partition-based methods , Qua-dratic Analytical methods , and Nonlinear Analyticalmethods . Meta-heuristic methods treat the placementas a step-wise optimization problem and solve it with a heuristicalgorithm such as Simulated Annealing and Genetic Algorithm,which can theoretically reach an optimal solution. RL methods re-gard the placement problem as a board game and train an agentto place the cells one by one. However, these methods suffer fromslow convergence, which restricts their usage only to the circuitswith a small number of large-sized cells. Partition-based methodsiteratively divide the chips netlist and layout into smaller sub-netlists and sub-layouts, based on the cost function of the cut edges.Optimization methods are used to find solutions when the netlistand layout are sufficiently small.The analytical methods are the mainstream choice for VLSI dueto their efficiency and scalability. This methodological group formu-lates an objective function that includes wirelength and overlaps tooptimize the positions of mixed-size cells. It can be further catego-rized into two types: quadratic and nonlinear methods. Quadratic",
  "Congestion Penalty": ": Overview of RoutePlacer. Forward Propagation: We construct the RouteGraph and initialize features, which arethen inputted into RouteGNN to obtain routability estimations. represents the features of cells, nets, grid cells, topo-edges,and geom-edges. Backward Propagation: We compute gradients of routability estimations w.r.t. cell locations via the proposeddifferentiable geometrical features and automatic differentiation tools. The gradient information is utilized for analyticalroutability optimization. methods aim to minimize wirelength and address overlapsin an alternating manner, whereas nonlinear methods employ a unified objective function that encompasses both wire-length and a parameterized overlap function. However, previousanalytical placement approaches often overlook routability whenoptimizing the objective function, RoutePlacer introduces a differ-entiable congestion penalty into the objective function, enablingdirect and synergistic routability optimization.",
  "Routability Optimization": "In modern placement, since traditional analytical placement meth-ods struggle to guarantee satisfactory routability, two-stage routabil-ity optimization methods have been extensively devel-oped as coarse-grained solutions. These methods typically comprisetwo phases: placement and routing. The placement phase employsa traditional placement approach, while the routing stage oftenuses heuristics and expert-designed routers to provide feedback forthe placement phase to enhance routability. Specifically, two-stagemethods expand all cell sizes to make more space for coarse-grainedoptimization. Therefore, we propose RoutePlacer, an end-to-endplacer designed for fine-grained level optimization. RoutePlaceremploys gradient-based optimization for cell position updates andcan integrate with two-stage methods to achieve comprehensiveoptimization at both coarse-grained and fine-grained levels.",
  "PROPOSED APPROACH": "RoutePlacer is schematically illustrated in . We integrate adeep learning-based routability penalty into the objective functionand calculate the congestion gradient to analytically optimize cell lo-cations. Each optimization iteration consists of two steps: Forward Propagation and Backward Propagation. The forward propaga-tion first constructs RouteGraph with its raw features. Then we in-put the RouteGraph and raw features into a well-trained RouteGNNto obtain routability estimation and sum up the estimationas routability penalty (,) = V . The backward propa-gation first calculates the gradient of congestion penalty over rawfeatures and the gradient of raw features over cell locations. Basedon chain rules, we can compute the gradient of routability penaltyover cell locations. Finally, we apply the widely used gradient-basedoptimization method, NAG optimizer, to update cell locations andoptimize routability. Note that the optimization targets cell loca-tions rather than GNN parameters. The RouteGNN parameters,after training, are frozen during placement optimization.",
  "Forward Propagation": "3.1.1Circuit Design. The circuit design is represented as a hyper-graph that stores the topological information of the circuit producedin the logic synthesis stage. The circuit design is a hypergraph = (V, E), where V represents the set of electronic units (cells)and E represents the set of hyperedges (nets). We transform thehypergraph into a heterogeneous graph. To construct a netlist, weconsider cells V and nets E as two types of vertices and link eachnet to cells interconnected by it. We call the constructed edgestopo-edges, which stands for the topology between cells and nets. 3.1.2RouteGraph. In forward propagation, we require routabilityestimation using graph neural networks to calculate the conges-tion penalty. To achieve this, it is essential to design graphs thatpreserve circuit information. To better retain information within asingle graph during placement, we must address two key challenges:effectiveness and efficiency.",
  "Feature Initializer": "geom-edge grid cell grid-edgeRouteGraph Route-Geomterical Message-Passing (geom-edge) Route-Geomterical Message-Passing (grid-edge) net grid-edge MaxPooling RoutabilityEstimation : Framework of RouteGNN. We initialize raw features and apply Route-Geometrical and Topological message-passingto gather topological and geometrical information. Then, we fuse and update the heterogeneous hidden representations toreadout routability estimation. Regarding effectiveness, in chip designs, the most informativesources are circuit design and cell locations. Handling these sourcesindependently is suboptimal. Thus, we need to integrate them intoa single heterogeneous graph.Regarding efficiency, during the placement process, cells can bedistributed in a very small area. Simply connecting geometricallyadjacent cells can result in a time complexity of (||V||2), where||V|| represents the number of cells. This level of complexity isunacceptable when dealing with circuits that comprise millions ofcells. However, restricting geometrically adjacent links to a constantnumber may result in the omission of numerous edges, leading toan incomplete graph structure. Therefore, a proper trade-off isrequired to model geometrical information with minimal loss ofinformation.To address these challenges, we propose RouteGraph G. Fortopology, we first transform the original hypergraph = (V, E)into a heterogeneous graph with two types of vertices, includingcells V and nets E. Then we link the net to the cells that thecorresponding hyperedge interconnects. The edge is called topo-edges, which stands for the topology between cells and nets.To gather geometrical information, we begin by gridding theentire layout to create an grid. Here, we set and tothe numbers of routing grid cells in the horizontal and verticaldirections as defined by the circuits. This grid serves as the basisfor constructing a grid graph.Within the grid graph, each node is referred to as a \"grid cell\"denoted as C, representing a specific grid in the layout. The edges, known as E or geom-edges, signify the adjacent relationshipsbetween these grid cells. Additionally, we define grid-edges denotedas E between cells and the corresponding grid cells withinthe grid graph. These grid-edges represent the precise positions ofcells on the layout. Furthermore, grid-edges indirectly indicate thegeometric adjacency relationships between cells.We utilize topo-edges, geom-edges, and grid-edges to effectivelyintegrate both topological and geometrical information into Route-Graph. As the complexity of constructing each type of edge isconsistently linear, the overall complexity of constructing Route-Graph remains (||P|| + ||V|| + + ) and is independent of celldistributions. 3.1.3Featurization. RouteGraph comprises three types of verticesand three types of edges. In our model, geom-edges solely repre-sent connections between grid cells, and as such, we do not as-sign features to geom-edges. We introduce V, U, C, E ,and E to denote the features of cells V, nets U, grid cells C,topological edges E, and grid edges E, respectively. Vencompasses attributes of cells V, such as size and connectivityto nets, alongside the cells geometric features V, as detailedin .2.1. U captures the span of nets as outlined in andtheir connectivity to cells. C incorporates features like RUDY and the central location of grid cells. E retains the intricatedetails of the interactions between cells and nets, employing thesignal direction (input/output) as the feature for topological edges.",
  "RouteGNN. The framework of RouteGNN is shown in . RouteGNN takes a RouteGraph as input and maps raw featuresV, U, C, E and E into hidden representations (0)V ,": "(0)U , (0)C , E , E , via Multi-Layer Perceptrons (MLPs).Then, it generates deeper representations of cells V, nets U, andgrid cells C with layers of message-passing. Finally, the outputcell representations are used for routability estimation after passingthrough readout layers.In each layer, the topological information and the geometric in-formation are collected through Topological and Route-Geometricalmessage-passing. The messages are then used to fuse and updatethe representations of cells V, nets U, and grid cells C.To collect topological information, we interact the messages ofcells V and nets U through topo-edges which preserve the topo-logical connection between cells and nets. For layer , we formulatethe message passing as:",
  "where hU is the hidden representation of net and UV is alearnable weight matrix": "Geometrical information is shared via interactions between ge-ometrically adjacent cells in RouteGraph. Initially, cell messagesare fused via grid-edges. These fused messages in grid cells arethen exchanged to enable indirect interactions among adjacentcells through geom-edges E. Subsequently, grid cell messagesare sent to cells via grid-edges E, enabling indirect interactionsamong geometrically adjacent cells.In Route-Geometrical Message-passing, we first collect messagesof cells V to obtain a fused message of cells for grid cells C:",
  "(,)E( hE(,) ) (CVhC ),(10)": "where hE(,) is the representations vector of grid-edges connecting, , is a learnable weight vector, and CV is a learnable weightmatrix.After computing topological and geometrical messages for cellsV and grid cells C with Topological and Route-Geometrical message-passing, we fuse them and update representations for cells V toobtain fused message ()V .",
  "= ( (V)) V, = ((V)) V.(15)": "Here denotes a Jacobian matrix. ( (V)) and V correspondto the backward process of differentiable features and RouteGNN.V can be calculated by automatic differentiation toolkits, suchas PyTorch, and (V) is derived in .2.1. Finally, weapply the NAG optimizer to update cell locations using the derivedgradients. 3.2.1Differentiable Geometrical Feature Computation. Geometri-cal features play a significant role in congestion estimation .We aim to collect the gradient () of geometrical featuresover cell locations for gradient-based congestion optimization. How-ever, geometrical features are grid features rather than cells raw fea-tures; they are non-differentiable w.r.t. the cell positions . There-fore, we need to transform the grid feature into a one-dimensionalvector Vas cell raw features and ensure that the vector isdifferentiable w.r.t. cell locations.We propose a Differentiable Geometrical Feature Compu-tation for a soft assignment of grids. The closer the routing gridis to the cell, the more wiring demand the cell has on that grid.Therefore, for each cell, we consider the closest nine grids to thecell and calculate the normalized weighted sum of RUDY, whereinthe reciprocal of the distance between a cell and a grid serves theweight. The above process can be formulated as below:",
  "EXPERIMENTS": "Our experiments aim to address three research questions (RQs).(1) Effectiveness: Can RoutePlacer improve routability comparedwith analytical placement methods? (2) Efficiency: Can RoutePlacerefficiently handle two sources of information and give accurateroutability estimation? (3) Extensibility: Can RoutePlacer improvetraditional methods by replacing an external router with RouteGNN?For the first RQ, we compare RoutePlacer against DREAMPlaceusing routability-related metrics. For the second RQ, we compareour runtime with NetlistGNN on the collected placement andvisualize the SSIM and NRMSE metrics to verify the reliability of pre-dictions. For the third RQ, we incorporate a cell inflation method (de-tailed in Appendix B.4) into DREAMPlace and RoutePlacer, where",
  "Evaluating Effectiveness": "To evaluate the routability of placement solutions, we use NCTUgrto generate routing results and measure wirelength. We divide theentire layout into grids and assign each grid a wire limit, denoted as. This limit represents the maximum number of wires allowed ineach grid cell. Overflow (, ) occurs when the number of wiresexceeds this limit in the grid cell (, ). Wirelength refers to thetotal length of all wires.Furthermore, the wire limit is categorized into two dimensions:horizontal () and vertical (). The number of horizontal andvertical wires in each grid cell must not surpass their respectivelimits. (, ) and (, ) represent the excess in the numberof horizontal and vertical wires, respectively.We compare DREAMPlace with RoutePlacer based on five met-rics: total overflow (TOF), wirelength (WL), maximum overflow(MOF), horizontal congestion ratio (H-CR), and vertical congestionratio (V-CR). They are defined as follows:",
  ".(20)": "The results on ISPD2011 are shown in . We defer theresults on DAC2012 to Appendix F.1. Compared with DREAMPlace,RoutePlacer shows a 16% reduction in total overflow, 2.5% reductionin max overflow, 1% rise in H-CR, 6% reduction in V-CR, and main-tains routed wirelength (averaged over benchmarks). The resultsindicate that RoutePlacer can optimize routability across variouscircuits.",
  ": Comparison of inference time on superblue7. Weadditionally plot the changes of electric overflow duringplacement": "To evaluate the efficiency of our model, we measure the runtimeof RouteGNN and NetlistGNN. The latter connects geometricneighbors to model geometrical relationships. visualizes theruntime comparisons between NetlistGNN and RouteGNN. Weobserve that as the placement process advances, cell overlap dimin-ishes and the cells become more evenly distributed. The inferencetime of geometric graph construction in NetlistGNN decreasesalong this process. In contrast, RouteGNN consistently maintains ashort runtime, unaffected by the distribution of cells.To evaluate the accuracy of our model, we employ two keymetrics: NRMSE and SSIM. NRMSE quantifies the element-wisediscrepancy between our prediction and the corresponding label atthe cellular level, whereas SSIM, as referenced in , measures thestructural similarity between our prediction and the ground truth atthe grid level. illustrates the distributions of the two statistics.In over 80% of all cases, RouteGNN gives predictions with highaccuracy, with NRMSE values below 0.1 and SSIM values above 0.8.",
  "Evaluating Extensibility": "To verify the extensibility of RoutePlacer, we incorporate a cell in-flation method (detailed in Appendix B.4). The cell inflation methodrequires routing results as inputs. We use NCTUgr to generate con-gestion maps for DREAMPlace, while using RouteGNN to generateroutability estimations for RoutePlacer. The original routabilityestimations of RouteGNN are on the cell level. We average theroutability estimations of all cells in each grid to formulate gridmaps required by the cell inflation method. The transformation isformulated as follows:",
  "||, ||,(21)": "where , denotes the set of cells locate in grid , , and ||, ||denotes the number of cells in the set.The results on ISPD2011 and DAC2012 are shown in and Appendix F.1, respectively. We report the same five metricsdescribed above. It is demonstrated that RoutePlacer shows a 44%reduction in total overflow, a 1% rise in H-CR, an 8% reduction inV-CR, and only a 1.5% rise in routed wirelength (averaged over the",
  "RoutePlacerDREAMPlaceRoutePlacerDREAMPlaceRoutePlacerDREAMPlaceRoutePlacerDREAMPlaceRoutePlacerDREAMPlace": "superblue1848K823K4612534036160.140.190.320.1913.7212.97superblue21014K991K453386446412160.190.140.140.1826.2325.40superblue4600K568K66327242880.180.130.130.139.799.35superblue5773K787K3672610810618260.230.350.190.1917.0916.47superblue101129K1086K441164515812120.200.210.130.1324.9124.66superblue121293K1293K26296542287141801844561.391.341.121.8339.6741.89superblue151124K1080K1590441430880.180.190.090.0915.0715.30superblue18484K469K913882241218160.270.200.190.168.989.21Average ratio1.001.451.001.201.001.021.001.041.000.99 (a) DREAMPlace(b) RoutePlacer TOF:108106 MOF:26H-CR:0.35 V-CR:0.19TOF:36726 MOF:18H-CR:0.23 V-CR:0.19 (0,5] (5,10] >10 : Visualization of placement solutions and their overflow on superblue5. The legend on the right shows the numericalrange of overflow corresponding to each color. (a) A placement generated by DREAMPlace. (b) A placement generated byRoutePlacer. We implement cell inflation for both methods. benchmark). It strongly indicates that RoutePlacer can be extendedto traditional two-stage pipelines. Incorporating RouteGNN intotwo-stage methods can yield improved routability-aware placers.We visualize the generated placements and their overflow in . The cell is denoted by the grey area, and overflow visualizationemploys a heatmap-like method, where the intensity of the redcolor corresponds directly to the overflow level. The more intensethe red, the higher the overflow. In , we present the detaileddistributions of overflow. Specifically, we conduct histogram anal-yses of overflow (, ), using overflow values as the x-axis and",
  "Breuer Melvin A. A class of min-cut placement algorithms. In Proceedings of the14th Design Automation Conference, DAC 77, page 284290, Dakar, 1977. IEEE.doi: 10.1145/62882.62896. URL": "Vidal-Obiols Alex, Cortadella Jordi, Petit Jordi, Galceran-Oms Marc, and MartorellFerran. Multilevel dataflow-driven macro placement guided by rtl structure andanalytical methods. IEEE Transactions on Computer-Aided Design of IntegratedCircuits and Systems, 40(12):25422555, Dec. 2021. doi: 10.1109/TCAD.2020.3047724. URL Ghose Amur, Zhang Vincent, Zhang Yingxue, Li Dong, Liu Wulong, and CoatesMark. Generalizable cross-graph embedding for gnn-based congestion prediction.In 2021 IEEE/ACM International Conference On Computer Aided Design, ICCAD 21,page 19, Munich, Germany, 2021. IEEE. doi: 10.1109/ICCAD51958.2021.9643446.URL",
  "Mirhoseini Azalia and Anna Goldie. A graph placement methodology for fast chipdesign. Nature, 594(7862):207212, Jun. 2021. doi: 10.1038/s41586-021-03544-w.URL": "Wang Bowen, Shen Guibao, Li Dong, Hao Jianye, Liu Wulong, Huang Yu,Wu Hongzhong, Lin Yibo, Chen Guangyong, and Heng Pheng Ann. Lhnn:lattice hypergraph neural network for vlsi congestion prediction.In Pro-ceedings of the 59th ACM/IEEE Design Automation Conference, DAC 22, page12971302, New York, NY, USA, 2022. Association for Computing Machinery.doi: 10.1145/3489517.3530675. URL Huang Chau-Chin, Lee Hsin-Ying, Lin Bo-Qiao, Yang Sheng-Wei, Chang Chin-Hao, Chen Szu-To, Chang Yao-Wen, Chen Tung-Chieh, and Bustany Ismail.Ntuplace4dr: A detailed-routing-driven placer for mixed-size circuit designswith technology and region constraints.IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems, 37(3):669681, Mar. 2018. doi:10.1109/TCAD.2017.2712665. URL Cheng Chung-Kuan, Kahng Andrew B., Kang Ilgweon, and Wang Lutong. Replace:Advancing solution quality and routability validation in global placement. IEEETransactions on Computer-Aided Design of Integrated Circuits and Systems, 38(9):17171730, Sept. 2019. doi: 10.1109/TCAD.2018.2859220. URL Cheng Chung-Kuan, Ho Chia-Tung, and Holtz Chester. Net separation-orientedprinted circuit board placement via margin maximization. In 2022 27th Asiaand South Pacific Design Automation Conference, ASPDAC 22, page 288293,Taipei, Taiwan, 2022. IEEE. doi: 10.1109/ASP-DAC52403.2022.9712480. URL Roy Jarrod, Viswanathan Natarajan, Nam Gi-Joon, Alpert Charles J., and MarkovIgor. Crisp: Congestion reduction by iterated spreading during placement. In2009 IEEE/ACM International Conference on Computer-Aided Design, ICCAD 09,",
  "pages 357362, San Jose, CA, USA, 2009. IEEE. doi: 10.1145/1687399.1687467.URL": "Lu Jingwei, Chen Pengwen, Chang Chin-Chih, Sha Lu, Huang Dennis Jen-Hsin,Teng Chin-Chi, and Cheng Chung-Kuan. eplace: Electrostatics-based placementusing fast fourier transform and nesterovs method. ACM Transactions on DesignAutomation of Electronic Systems, 20(2):134, Mar. 2015. doi: 10.1145/2699873.URL Haeyeon Kim, Minsu Kim, Federico Berto, Joungho Kim, and Jinkyoo Park.Devformer: A symmetric transformer for context-aware device placement. InInternational Conference on Machine Learning, pages 1654116566, Honolulu,Hawaii, USA, 2023. PMLR, JMLR.org. Schtt Kristof, Sauceda Huziel E., Kindermans P.-J, Tkatchenko Alexandre, andMller Klaus-Robert. Schnet a deep learning architecture for molecules andmaterials. The Journal of Chemical Physics, 148(24):241722, Jun. 2018. doi: 10.1063/1.5019779. URL Yao Lai, Jinxin Liu, Zhentao Tang, Bin Wang, Jianye Hao, and Ping Luo. Chip-former: transferable chip placement via offline decision transformer. In Proceed-ings of the 40th International Conference on Machine Learning, ICML23, page1834618364, Honolulu, Hawaii, USA, 2023. JMLR.org. doi: 10.5555/3618408.3619165. URL Hsu Meng-Kai, Chen Yi-Fang, Huang Chau-Chin, Chou Sheng, Lin Tzu-Hen,Chen Tung-Chieh, and Chang Yao-Wen. Ntuplace4h: A novel routability-drivenplacement algorithm for hierarchical mixed-size circuit designs. IEEE Transactionson Computer-Aided Design of Integrated Circuits and Systems, 33(12):19141927,Dec. 2014. doi: 10.1109/TCAD.2014.2360453. URL Kim Myung-Chul, Hu Jin, Lee Dong-Jin, and Markov Igor. A simplr method forroutability-driven placement. In Proceedings of the International Conference onComputer-Aided Design, ICCAD 11, page 6773, San Jose, California, USA, 2011.IEEE. doi: 10.1109/ICCAD.2011.6105307. URL",
  "Kim Myung-Chul, Lee Dong-Jin, and Markov Igor. Simpl: an algorithm forplacing vlsi circuits. Communications of the ACM, 56(6):105113, Jun. 2013. doi:10.1145/2461256.2461279. URL": "Spindler Peter and Johannes Frank. Fast and accurate routing demand estimationfor efficient routability-driven placement. In Proceedings of the Conference onDesign, Automation and Test in Europe, DATE 07, pages 16, San Jose, CA, USA,2007. EDA Consortium. doi: 10.1109/DATE.2007.364463. URL Cheng Ruoyu and Yan Junchi. On joint learning for solving placement androuting in chip design. In Advances in Neural Information Processing Systems,NeurIPS 21, pages 1650816519, online, 2021. Curran Associates, Inc. doi: 10.48550/arXiv.2111.00234. URL Yunqi Shi, Ke Xue, Lei Song, and Chao Qian. Macro placement by wire-mask-guided black-box optimization. In Advances in Neural Information ProcessingSystems, NeurIPS 23, pages 68256843, New Orleans, USA, 2023. Curran Asso-ciates, Inc. doi: 10.48550/arXiv.2306.16844. URL Yang Shuwen, Yang Zhihao, Li Dong, Zhang Yingxue, Zhang Zhanguang, SongGuojie, and Hao Jianye. Versatile multi-stage graph neural network for circuitrepresentation. In Advances in Neural Information Processing Systems, NeurIPS22, New Orleans, Louisiana, USA, 2022. Curran Associates, Inc. \"Chen Tung-Chieh, Hsu Tien-Chang, Jiang Zhe-Wei, and Chang Yao-Wen\". \"ntu-place: a ratio partitioning based placement algorithm for large-scale mixed-size designs\".In \"Proceedings of the 2005 International Symposium on Phys-ical Design\", \"ISPD 05\", page \"236238\", \"New York, NY, USA\", \"2005\". \"As-sociation for Computing Machinery\". doi: \"10.1145/1055137.1055188\". URL\"\". Zhou Wang, Bovik Alan Conrad, Sheikh Hamid, and Simoncelli Eero. Imagequality assessment: From error visibility to structural similarity. IEEE Transactionson Image Processing, 13(4):600612, Apr. 2004. doi: 10.1109/TIP.2003.819861. URL Liu Wen-Hao, Kao Wei-Chun, Li Yih-Lang, and Chao Kai-Yuan. Nctu-gr 2.0:Multithreaded collision-aware global routing with bounded-length maze routing.IEEE Transactions on computer-aided design of integrated circuits and systems, 32(5):709722, May 2013. doi: 10.1109/TCAD.2012.2235124. URL Li Wuxi, Dhar Shounak, and Pan David Z.Utplacef: A routability-drivenfpga placer with physical and congestion aware packing. In 2016 IEEE/ACMInternational Conference on Computer-Aided Design, ICCAD 16, pages 869882, Austin, TX, USA, 2016. IEEE. doi: 10.1145/2966986.2980083. URL Li Wuxi, Lin Yibo, and Pan David Z. elfplace: Electrostatics-based placementfor large-scale heterogeneous fpgas. In 2019 IEEE/ACM International Conferenceon Computer-Aided Design, ICCAD 19, pages 18, Westminster, CO, USA, 2019.IEEE. doi: 10.1109/ICCAD45719.2019.8942075. URL",
  "Haoran Ye, Jiarui Wang, Zhiguang Cao, Federico Berto, Chuanbo Hua, HaeyeonKim, Jinkyoo Park, and Guojie Song. Large language models as hyper-heuristicsfor combinatorial optimization, 2024": "Liu Yen-Chun, Chen Tung-Chieh, Chang Yao-Wen, and Kuo Sy-Yen. Mdp-trees:multi-domain macro placement for ultra large-scale mixed-size designs. InProceedings of the 24th Asia and South Pacific Design Automation Conference,ASPDAC 19, page 557562, New York, NY, USA, 2019. Association for ComputingMachinery. doi: 10.1145/3287624.3287677. URL Lin Yibo, Dhar Shounak, Li Wuxi, Ren Haoxing, Khailany Brucek, and Pan DavidZ. Dreampiace: Deep learning toolkit-enabled gpu acceleration for modern vlsiplacement. In 2019 56th ACM/IEEE Design Automation Conference, DAC 19,pages 16, Las Vegas, NV, USA, 2019. IEEE. doi: 10.1145/3316781.3317803. URL Lin Yibo, Pan David Z., Ren Haoxing, and Khailany Brucek. Dreamplace 2.0: Open-source gpu-accelerated global and detailed placement for large-scale vlsi designs.In 2020 China Semiconductor Technology International Conference, CSTIC 20,pages 14, Shanghai, China, 2020. IEEE. doi: 10.1109/CSTIC49141.2020.9282573.URL",
  "NotationDescription": ",Physical locations of cells in the layoutGRouteGraphVSet of cellsUSet of netsCSet of grid cellstopo-edgeSet of topo-edges which denotesthe topology between cells and netsgeom-edgeSet of geom-edges which signify the adjacentrelationships between these grid cells.grid-edgeSet of grid-edges which are denoted as edgesbetween cells and the corresponding grid cellswithin the grid graph(, )Density Penalty(, )Routing Congestion PenaltyWeight of density penaltyParameter of wirelength model for smoothnessWeight of congestion penalty",
  "B.4Cell Inflation": "Given a congestion map generated by the router, a cellinflation method expands cell size according to the rules givenbelow when electric overflow is less than 0.2. First, for each cell,we compute the maximum congestion among grids that overlapwith the cell. Then, based on the maximum congestion, we scalethe cell size proportionally. The whole process is formulated as:",
  "B.5Training Placement Collection": "To ensure diversity in the training dataset of placement, we useelectric overflow as a key metric and collect placement atvarious electric overflow levels. This strategy allows RouteGNNto learn a richer representation of routability. Electric overflowranging from 0 to 1 reflects the overlap level between cells. Webegin collecting placements when the electric overflow first dropsto 0.8; subsequently, each time the electric overflow decreases by0.05, we collect a placement again.",
  "CBASELINE SETTINGS": "For RouteGNN, we set hidden layer dimensions of,, , , , (V, U,C,E ,E,, E ) = (32, 64, 16, 8, 4, 4) and message-passing layers = 2. Weset the grid cell size equal to the routing grid cell size on eachcircuit. During training, we use Adam optimizer with learningrate = 0.0002, learning rate decay = 0.02, and weight decay = 0.0002; we set training epoch = 100 and use MSE loss fortraining. To avoid excessive output range, we logarithmize bothlabel and model output. For NetlistGNN, we use its default modelsettings.Both DREAMPlace and RoutePlacer use NAG Optimizer toensure a fair comparison. Our training parameters are given in and 4. \"Num adjust\" denotes the maximum number of adjustmentsfor cell inflation. and refer to the congestion penalty andcell inflation hyperparameter, respectively, as detailed in .2.1 and Appendix B.4. The adjustment strategy for and ,adopted by both DREAMPlace and our method, follows Lu et al. .For DREAMPlace and our method, the applied hyperparametersadhere to the default setting, if not mentioned in the table. Oursource code is available at"
}