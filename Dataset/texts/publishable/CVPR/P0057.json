{
  "Abstract": "We present a novel data-driven simulation environmentfor modeling traffic in metropolitan street intersections. Us-ing real-world tracking data collected over an extendedperiod of time, we train trajectory forecasting models tolearn agent interactions and environmental constraints thatare difficult to capture conventionally. Trajectories of newagents are first coarsely generated by sampling from thespatial and temporal generative distributions, then refinedusing state-of-the-art trajectory forecasting models.Thesimulation can run either autonomously, or under explicithuman control conditioned on the generative distributions.We present the experiments for a variety of model configura-tions. Under an iterative prediction scheme, the way-point-supervised TrajNet++ model obtained 0.36 Final Displace-ment Error (FDE) in 20 FPS on an NVIDIA A100 GPU.",
  ". Introduction": "Accurate modeling and reconstruction of traffic flows insimulation environments is important for solving trans-portation problems in modern cities .Simulation oftraffic trajectories within intersections of a metropolis in-volves consideration of realistic car movements, human de-cisions and interactions, environmental constraints, and var-ious forms of social regulations.Conventional simulation systems are often built bottom-up where the state space, rules of interactions, and poli-cies are unambiguously defined beforehand. This can bechallenging given the complex nature of real-world appli-cations. Moreover, most existing simulation systems targettraffic flow control and optimization, while lacking realisticfine-grained details of interactions between traffic partici-pants. It is also quite challenging for such systems to modelhuman decisions, where the behavior of each agent can bespontaneous, or affected by other agents as well as environ-mental constraints in the scene.To address these challenges, this study uses a data-drivenapproach leveraging the data acquired from a real traffic in-tersection situated in a busy urban environment. We utilize",
  "(d) Refined trajectories": ". Overall workflow of agent generation. (a) Real-worldtrajectories collected from the intersection (vehicles in purple andpedestrians in orange). (b) Examples of different types of trajecto-ries categorized by GMMs. (c) Coarse way-points sampled fromGMMs and interpolated prior trajectories. (d) Final trajectoriesrefined by deep forecasting models compared to the coarsely sam-pled prior trajectories in (c).",
  "arXiv:2408.00943v1 [cs.CV] 1 Aug 2024": "other state-space models . However, these techniques of-ten struggle in real-world scenarios due to the intractablesize of states and policies. Most simulation systems focuson vehicle flows and exclude the role of pedestrians. Morerecent work includes the modeling of vehicle-pedestrian in-teraction such as Social Force Model , which has beenadopted for the prediction of pedestrian motions . Trajectory Forecasting. Deep Neural Networks (DNNs)are used for predicting future motions of pedestrians andvehicles . The key architectural component is often asequential model (e.g. Recurrent Neural Network or Trans-former) which autoregressively generates future predictionsbased on past observations . Some models take agenerative approach and predict the embeddings of futuretrajectories from latent distributions to account for vary-ing data patterns or noise using Generative AdversarialNetworks (GANs) , Generative Adversarial Imi-tation Learning (GAIL) or Conditional VariationalAuto-Encoders (CVAEs) .Specially de-signed modules are introduced when modeling interactionsin multi-agent scenarios by pooling , attention op-eration , or Graph Neural Networks .Many architectures choose to incorporate auxiliary super-vision using coarse way-points or final destinations of agent trajectories to boost model performances.",
  ". Data Collection": "We utilize a high-elevation camera overlooking a metropo-lis intersection.We fine-tuned a YOLOv8 object detec-tion model for pedestrians and vehicles, then collectedreal-world trajectory data under the tracking-by-detectionparadigm featuring the BoT-SORT algorithm .To underline the entry and exit locations for each agentfor statistical analysis, we pre-processed the collected databy filtering out the trajectories that unexpectedly terminatein the middle of the intersection (due to occlusions or failureof the detection-tracking models). The filtered trajectorieswere then uniformly resampled to align at 30 FPS. ashows several processed trajectories overlaid on top of eachother. Details about the dataset are described in Sec. 4.1.",
  ". Statistical Analysis": "The distributions of pedestrian and vehicle trajectoriesexhibit clear dependencies both spatially and temporally(b and ). It is intuitive to model them using con-ditional generative models, where the new agents would begenerated by sampling from the distributions during sim-ulation. At this stage of the study, we adopted GaussianMixture Model (GMM) for this purpose. We will exploremodels such as conditional GANs or CVAEs in fu-ture studies.",
  ". Distribution of agent densities over 24 hours. Thex-axis is the ToD and the y-axis is the hourly average pedestrianand vehicle counts": "Temporal Agent Density. gives the distribution ofagent densities traveling through the intersection over dif-ferent time-of-day (ToD). The bars show the collected num-ber of agents while the dashed lines delineate the fittedpedestrian and vehicle frequencies, respectively. The x-axisis shifted to begin at 8:00 and end at 7:00 the next day forbetter interpretability. We assume that the ToD when agentsenter the intersection is centered around a few peak hours(e.g. getting to work during the daylight or returning homeat nighttime) and fit the mean pedestrian and vehicle den-sities using two GMMs (with 4 components for pedestriansand 3 components for vehicles, values determined by exper-iments). We denote their time-dependent distribution by",
  "where Nt is the total number of agents at time t": "Spatial Trajectory Categorization.In the case of ur-ban intersections, the agent trajectories are generally moreconfined to follow specific patterns dictated by the lay-out of intersections, traffic rules, social regulations, andenvironmental constraints .We propose to charac-terize the trajectory of each agent by:1) the positionand velocity at the point of entry into the intersectionx(0), x(0) R2; 2) the position and velocity at itsexit from the intersection x(T), x(T) R2; 3) the to-tal time elapsed T R between its entry and exit; and4) |K| = 20 way-points sampled evenly along the tra-jectory x(K) R2|K|, with sampling time T/K. Thusa vectorized representation of each agent can be given byz =x(0), x(0), x(T), x(T), x(K), T R2|K|+9. Wemodel the distribution of different types of trajectories us-ing a GMM with M = 12 components fitted respectively",
  ": end function": "The algorithm for the generation of new agents dur-ing simulations is illustrated in Algorithm 1. We start bysampling pedestrians and vehicles from their correspond-ing GMMs. Auxiliary conditions can be provided to insertmore control into the sampling process. For example, if onewishes to sample agents from specific GMM components(i.e. pedestrians or vehicles going in specific directions) insome set C, then the GMM can be modified as",
  "where wm = wm/": "nC wn is the adjusted componentweight. This is exemplified in Sec. 4.2.The sampled z can serve as good priors that providehigh-level control over agent motions. However, this is notfine-grained enough due to the basic limitation that GMMstake no consideration of agent interactions or other envi-ronmental constraints. Sec. 3.4 describes a deep-learning-based refinement approach.Note that the sampling times of the way-points T (i)/Kare not uniform across different agents because their tra-jectories may have drastically different time elapsed T (i).Given that z also contains the position and velocity at bothends, we fit the trajectory with Cubic Splines , obtaininga piece-wise interpolating polynomial with time-continuousacceleration. We then evaluate the polynomial with a fixed time interval t = 0.4s (2.5 FPS), obtaining a prior trajec-tory xpr as inputs to deep-learning-based trajectory fore-casting models.c illustrates the prior trajectories of several pedes-trians and vehicles denoted by dashed lines, where thecircles are the interpolating way-points sampled from theGMM components shown in b.",
  ". Deep-Learning-Based Trajectory Refinement": "To model agent interactions and other latent patterns in theirmotions, we adopt the TrajNet++ model , a DNN fea-turing an LSTM and a grid-based pooling module that dealswith agent interactions. The model takes Lob = 8 steps(3.2s) of past observations to predict Lpd = 12 steps (4.8s)into the future. The model operates in a goal-supervisedmanner, i.e. the agent positions at the end of the predictionwindow are also provided to the model as auxiliary inputs.The choice of Lob and Lpd in our dataset follows from pub-lic benchmarks . Sec. 5 presents more experi-ments comparing different Lpd-s.At each time-step t, we combine Lob steps of previoustrajectories from all agents in the scene as xob := x(tob)(we use the sampled xpr in case of newly generated agentswith no past predictions), along with the temporal target lo-cations (i.e. goals) of trajectories taken from xpr at the endof the prediction window xtg := xpr(t + Lpdt) as modelinputs. The model then predicts",
  ". Simulation Algorithm": "The simulation algorithm is summarized in Algorithm 2.It maintains a set of active agents Aac. At each iteration,we (i) obtain the expected total number of agents Nt fromptod, (ii) generate prior trajectories of new agents xpr frompgmm accordingly, and (iii) add them into Aac. Then theobservations xob and target locations xtg of all agents aresliced from Aac (as in Eq. (4)) to construct DNN inputsand generate refined trajectories xpd, which are then con-catenated to the historical data in Aac. Any agent whosecurrent position x(i)t:= x(i)(t) reaches its expected desti-nation x(i)T:= x(i)pr (T (i)) will be considered to have exitedthe intersection and removed from Aac.",
  ". Dataset and Evaluations": "The collected data from the intersection were organized tofit different purposes. For object detection and tracking, 13kannotated images were collected sporadically over 5 yearsfrom a high-elevation camera overlooking the intersection.The fine-tuned YOLOv8 obtained 91.6 mAP for pedestriansand 98.7 mAP for vehicles, respectively.For trajectory forecasting, tracked objects were collectedfor over 30 days containing time and bounding-box loca-tions for 510k pedestrians and 250k vehicles.We uni-formly sample 10k of 20-frame (8s) scenes and 10k of 40-frame (16s) scenes for trajectory forecasting model trainingand evaluation. Additionally, complete trajectories of 176kpedestrians and 215k vehicles were extracted from the col-lected data for the statistical analysis described in Sec. 3.2.We trained trajectory forecasting models on the 20-framescenes (with Lob = 8, Lpd = 12) using smooth-L1 lossand adopted common performance metrics of Average-Displacement-Error (ADE, the RMSE between the predic-tions and ground-truths over all agents at all time-steps) andFinal-Displacement-Error (FDE, the RMSE over all agentsevaluated only at the last time-step of the prediction win-dow) . The models were trained on the standard scenesand evaluated in an iterative prediction scheme (described inSec. 3.4) on the extended scenes to resemble the workflowduring actual simulations. TrajNet++ with way-point su-pervision achieved the most desirable performance of 1.65",
  ". Controlled Simulation": "The proposed simulation system can coarsely control agenttrajectories with Eq. (3) in terms of where they enter andexit the intersection as well as a prior trajectory to follow.In a we purposefully sample south-bound pedestriansand left-turning vehicles whose prior trajectories meet at themiddle of the crosswalk (the red ellipse), to see whetherthe trajectory forecasting model will correctly react to thissituation.As illustrated in b, the trajectory forecasting modelforces both the vehicle and the crowd of pedestrians to slowdown and deviate from their prior trajectories (denoted bythe dashed red lines) to avoid a collision. This is a com-mon practice that respects social norms and is expected tobe observed in real-world scenarios.",
  ". Outliers": "Adopting conditional generative models for trajectory cate-gorization allows for the identification of outliers in the col-lected trajectories by calculating their likelihoods (Eq. (2)).In c, we show the outliers in pedestrians whose log-likelihoods are more than 20 times of standard deviationsaway from the dataset mean. Some of these outliers show apedestrian making a turn-around; others show a pedestrianstaying still in one location for an exceptionally long periodof time.",
  "(f) Way-point supervised": ". Simulation results and experiments. (a) - (b) Controlled simulation of a potential collision and the reaction of the trajectoryforecasting model. (c) Outliers identified in pedestrians by thresholding the likelihood of the trajectories. (d) - (f) Comparison of differentsupervision schemes for TrajNet++. Under the same priors, different results of refined trajectories are given by (d) no supervision, (e) finaldestination as supervision, and (f) way-points iteratively sampled from the priors as supervision.",
  ". Model Configuration": "Beyond the standard metrics of ADE/FDE calculated over apredefined prediction window length Lpd, the measurementof simulation quality requires more careful considerations.Here we provide a brief discussion on system and modelconfigurations based on current results. Goal Supervision. We compared the refined trajectoriesfrom TrajNet++ before and after adding goal supervision(d vs. Figs. 3e and 3f). Significant improvements in re-finement quality can be observed, where agents deviate lessfrom their prior trajectories without external forces. Rela-vant results are also quantified in Tab. 1.It is worth noting that the supervised models are oftentrained with fixed-length sequences and the agents are ex-pected to reach their destinations in exactly Lpd steps. Thisraises considerable issues in real-world deployment, sincealthough it might not be difficult to know the destination of an agent (in our cases they are directly sampled), it can bechallenging to know exactly when they will get there. Su-pervising the model with final destinations (e) resultedin notable overshoot in cases when an agent needs a longertime window to reach the destination than Lpd, while, inother cases, undershoot when they need a shorter window.This can be mitigated by substituting the destinationswith way-points taken from their prior trajectories at Lpdsteps ahead, with results shown in f. Alternating tosmooth-L1 loss instead of MSE also dampens the over-shoot. Agent motions tend to be more controllable by thestatistical model (i.e. pgmm), while being able to react andmake deviations when necessary (Sec. 4.2). Choice of Lpd. Using the 40-frame (16s) scenes, we fur-ther compared the performances of predicting iteratively bytraining the model with Lpd = 12 (4.8s) and taking previ-ous outputs as new inputs, vs. directly training the model to predict in one-shot with Lpd = 32 (12.8s). The results aregiven in Tab. 1. For TrajNet++, Wpts. denotes way-pointsupervision and Dest. destination supervision, as opposedto LSTM and Trajectron++ using no supervisions.By comparison, the destination-supervised TrajNet++model achieved the lowest ADE of 0.59, while the way-point supervised version had a higher ADE but the low-est FDE of 0.36. Higher FPS was generally obtained un-der larger Lpd due to fewer operations beyond model in-ference (e.g. data preparation). Considering the aforemen-tioned complexities of choosing appropriate Lpd and apply-ing destination supervision in practice, it is thus reasonableto use way-point supervision with shorter Lpd = 12 duringactual applications, giving our chosen model for the exper-iments in Sec. 4.",
  ". Conclusion and Future Work": "In this study, we propose a data-driven methodology forsimulating the movement (trajectories) of agents within anintersection in a metropolis. We show that trajectory fore-casting models are able to realistically govern agent motionsunder proper supervision by the statistical priors. The Tra-jNet++ model with way-point supervision was able strike abalance between the length of the prediction window andoverall simulation quality by performing the predictions it-eratively, achieving an FDE of 0.36 under controlled exper-iments. However, we note that the presented models weretrained and evaluated within a single traffic intersection,raising reasonable concerns on potential overfitting sincetraffic conditions may vary drastically across different loca-tions. More comprehensive evaluation is needed to addressthe issue.Future work will include (a) evaluation of alternative tra-jectory forecasting architectures and configurations, (b) in-corporation of a larger number of intersections and morediverse traffic scenarios for better generalization, (c) ex-ploration of other potential cases of agent interactions un-der controlled simulation, and (d) investigations on how toconnect broader aspects of applications (e.g. collision alert,traffic light control, and more efficient deployment). We in-tend to incorporate the model with graphics engines wherewe can reconstruct the traffic scenarios of the intersectionin the digital world.",
  "Nir Aharon, Roy Orfaig, and Ben-Zion Bobrovsky. BoT-SORT: Robust associations multi-pedestrian tracking. 2": "Mourad Ahmane, Abdeljalil Abbas-Turki, Florent Perronnet,Jia Wu, Abdellah El Moudni, Jocelyn Buisson, and RenanZeo. Modeling and controlling an isolated urban intersectionbased on cooperative vehicles. 28:4462. 2 Alexandre Alahi, Kratarth Goel, Vignesh Ramanathan,Alexandre Robicquet, Li Fei-Fei, and Silvio Savarese. So-cial LSTM: Human trajectory prediction in crowded spaces.In Proceedings of the IEEE Conference on Computer Visionand Pattern Recognition (CVPR). 2"
}